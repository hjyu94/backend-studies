https://youtu.be/LKvrFltAgCQ

let's learn how to create a new spring security app that uses JDBC to connect to your database for user information we learn how to configure spring security to query your database to get the users and authorities in order to authenticate your users and you also learn how to make it work with different schemas and data sources let's check it out [Music] I'm gonna start by going to start spring that I owe and enter my group name and artifact name details and there's gonna give me a blank spring boot project to work with I'm just gonna call this artifact that spring security JDBC and some dependencies that I'm gonna add our the spring web starter spring security starter obviously and then as far as database is concerned I'm gonna be adding the h2 database which is kind of like an in-memory database that we will be using for the purposes of this video but I'm also going to tell you how to connect to an external database maybe like my sequel database or an Oracle database it's actually very similar and I'll tell you how to connect to those things but for this video it's easier to just do an embedded database I'm just doing H to hear the other dependency that I'm going to add is the JDBC API because JDBC is something that is gonna power all the interaction with the database so we're gonna be using the JDBC API behind the scenes to get the user information from the database in order to validate the authentication process so I'm just going to throw this dependency in there and then that this we are done I'm gonna click on generate project and then open this in IntelliJ alright so I have this project open here and then I'm going to start with a home resource right I'm gonna create a resource with a bunch of api's I'm gonna call this home resource I'm specifically gonna add three API C all right so I'm going to be adding a home API which is basically the root URL and this is gonna be a available for everybody right there's no authentication required for this one and then I'm going to create a slash user API which is available for authenticated users only and the role should be admin or user and then I have the third API which is the admin and this is going to be available only to admin roles all right so the user has a user role they can only see the slash and /user api's and the cannot see admin but an admin person a user with an admin role can see all the three ApS can access all the three api's right so this is what we're gonna be building now in order to configure spring security I need to create this configuration class which extends the web security configure our adapter all right I'm going to call the security configuration and I'm going to extend the web security configure our adapter and now this gives me an opportunity to get hold of the authentication manager builder and here is the method here there is a configure method which takes in the authentication manager builder and this lets me configure the authentication mechanism that I need in this case I need JDBC authentication if you're not sure how this works check out this video that's showing up in the tile here which talks about creating in memory authentication using the authentication manager build other concept is pretty much the same here we're using a built in spring security class in order to tell spring security that hey we need database authentication so in order to do this first I need to have this enable web security annotation on top of this class so that this lets spring security give us this auth object right the authentication manager builder object for us to configure right so now I'm going to use that object in order to do configuration the previous attempt at configuration in the series was in memory authentication but this time we're going to be doing JDBC authentication having a different authentication mechanism is as simple as that instead of calling one method you're calling this other method and this is JDBC authentication and this tells spring security that this is what you need all right so as with in-memory authentication there's a bunch of configuration that you need to do over here alright so let's pause this for a bit and we will come back to what that configuration is after we done with the authorization all right so let's quickly set up the authorization here the authorization is another method we need to override on this class so I'm going to do that over right here there is another configure method which takes an HTTP security and this is what lets us configure the authentication and I'm just gonna paste this bunch of code that we got from the previous tutorial again check out the card if you want to learn about that what we're doing here is we are authorizing all requests and then we are doing a bunch of hand matters all right so this first line tells spring security that we need to authorize all requests this line tells spring security that the slash admin URL needs to be accessible only by somebody who has the admin role right then this line say is the slash user URL needs to be accessible only by someone who has a either an admin role or a user role and then the slash which is the root URL needs to be accessible by everybody here so you do that dot permit all and then I specify a farm login which is kind of the default spring security gives us that login and logout functionality using forms all right so we have the authentication placeholder and the full authorization ready so now we need to go back to the authentication we need to basically tell spring security hey spring security I've got my user information the user credentials in a database go look at the database when somebody's trying to authenticate right look up that username see if it's available if it's available look up the password and see if the password matches look up if that user is valid if the user is activated you know things like that so how do we tell spring security there and how our database is structured the general way to tell spring security where your databases is by configuring a data source beam all right so I'm going to create this auto wired data source beam and then you need to somehow configure the data source somewhere else right you need to have an instance of the data source somewhere else and then you can wire in the data source and then you can actually pass that into this JDBC authentication and say hey spring security there's my data source just go look it up now how does spring security know what this configuration is well there are a bunch of ways in which you can configure it I'm going to talk about how you can configure an external data source in a little bit but in this particular case what we have done is we have added an embedded database we've added h2 as an embedded database when you add an embedded database to spring boot applications springboard is smart enough to create that data source for you Springwood says okay I've got an h2 database in my class spot I know that this has to be the data source so I'm going to auto configure this data source so with this line with by just doing this what you've done is you have actually configured spring security to point to your h2 database all right that out of the way now the next step is to create the schema in your extra database and to create users that are populated in that schema now how do you do that well spring security has some default opinions some out-of-the-box opinions about how your schema specifically for users should be all right spring security says ok if you give me a clean database to work with you don't even need to create those user tables and the authority tables I can do that for you all right so we can actually leverage spring security to create those default user and authority tables and you can also tell spring security to create some default users all right so let's do that and then we'll change it to have spring security read from some pre-existing users so let's try the default option first I'm gonna say a spring security create your default schema so I do that by specifying this method here with default schema now we have our h2 database populated with couple of tables we have the user table and the authorities table then spring security is going to create that schema and set it up in our datasource next we can have a bunch of users created for that datasource so I'm gonna say this with user method and I can pass him a bunch of user objects so I'm gonna create one user object here but user name the person the username and just gonna create a user called user and then the password is going to be pass and then I'm gonna create this but the role of user write user and then I can add more users to this I can say another Dartmouth user and then let me create an admin user all right so it's gonna be pretty much the same that we have seen here I'm just gonna copy this over and then this time it's going to be an admin user I'm just gonna change the user name to admin the password is same and the role is admin all right so these steps what we have done is we have created a schema for this default data source this data source happens to be h2 here but it could be something else entirely it's basically what this data source is pointing to by default it's pointing to h2 and we haven't touched it here but let's say we change this data source to point to my sequel or we point to Oracle spring security is gonna do all the stuff for that data source so there are a couple of things that happen here when the application starts up these instructions tell spring security to populate the database with certain schema and certain data and then at runtime when the authentication happens it's basically using this data source to verify user information against what was already in the database which in this case we are populating alright so now what we can do is pretty much run this application but before we do this there is one last thing we need to add which is password encoder again refer to the video that was linked to understand why but basically we need like a no op password encoder we need some password encoder here and we're using no op password encoder because we don't want to get into the whole hashing thing I'm gonna create a separate video where I talk about hashing and password encoding and all that stuff but for now just an OAuth password encoder will do write this password encoder will do nothing so whatever you see in the database in this case password is passed that's the password that we need to use all right so now let's run this thing I'm going to run this main method and the page the root URL works fine but let's say I admin well I have to enter admin and TAS and there you go the admin page loads up as you can imagine this is not realistic you wouldn't create production applications by populating the default schema and by populating a couple of users you would imagine that this data and the schema is already available so let's try to get rid of this right so this default schema and this creation of users should ideally not be here right so let me get rid of this and this should be the ideal state in a real world application you have a database that's already there you have a schema and you have users populated and you're just telling spring security to connect to that data source in order to do authentication now if you were to do this this means that there has to be something else that's already created that schema set it up in the database and populate it a couple of users so let me actually do that now I'm gonna do that by creating a couple of files in order to set up the schema and the populate users exactly the same way as what Spring Security today over here right so the default schema that you got when you did that use default schema method is basically available in the spring documentation over here and I'm gonna link to this in the description so basically this is the standard schema that spring security is gonna provide you don't have to use the schemas or you can change this and I will also tell you how to work with a different schema if it's not what's over here but if you were to use the schema that's exactly like what spring security expects you don't have to do any other configuration right you just need to spell spring security to point to that data source and then spring security is actually expecting your data to be in this structure if you were to change it so then it's up to you to configure it but now what I'm going to do is I'm gonna use this standard schema but I'm not gonna tell spring security to do it I'm gonna use the spring boots schema or sequel mechanism in order to set up this schema in my embedded h2 database there are a couple of create table commands over here so this is a command which creates the user table it has the username the password and then an enabled column which is a boolean decides if that user is enabled or not if the user is disabled as you might imagine you cannot log in with that user all right and then the second table that we're gonna create is this Authority stable writes his authority stable contains Authority information for these users and this shares a foreign key that the user field the username field in the users table alright and if this Authority stable has the username and the authority so you can imagine they're a bunch of authorities for a given user so there is a one to many mapping between users and authorities and then finally you also have this index for authorities for performance reasons so that they look up off the authorities is fast right so this is a recommended schema and this is what you get out of the box when you ask Spring Security to create a schema for you but now what I'm gonna do is I'm gonna copy this and create this myself you also need to know what what the documentation says over here this schema depends on the dialect the syntax of the schema depends on the dialect alright so as you can see below it has a different commands set of commands for the Oracle database because the dialect is different but in our case for h2 database this dialect is going to work just fine so I'm gonna copy this whole thing and I'm gonna switch to IntelliJ and I'm going to create this file called schema dot sequel all right I'm gonna switch to the project and in my resources folder I'm going to create a file called schema dot sequel if you don't know schema at sequel is a file that spring boot uses to setup a schema so basically you can create DDL statements over here and then save it into the c schema at sequel file and then when spring boots starts the application it is going to run those commands and set up the schema so this is basically a place where you can set up your database before the application starts again this is very likely going to be used only for development environments probably not for production although there are a couple of use cases for production that I can see so I'm gonna paste this syntax over here so that basically I'm telling springboard hey run this thing when the application starts so this is outside of the spring securities default behavior I am manually creating the schema myself okay so this is the schema part the next thing I need to do is set up users set up to users like we did before I'm going to create a user user which is a role user I'm gonna create an admin user which is role admin in order to run data population queries any data related queries I can create another sequel file in the same path called data at sequel and here I can again specify sequel statements that springboard is going to run and I'm going to paste a couple of statements over here basically the first statement inserts into user one record where the username is user password is pass and enabled is true alright this is the user row to create one more row for admin again another insert into the user stable this time the username is admin password is still the same pass and enabled is true again these are entries into the users table there is nothing here which tells what the authority of these users are there pretty much two distinct users nothing special here then I can give them different roles in the authorities table so I'm gonna create an insert that occurred in to the authorities table in the first record with the username as user and the authority is roll underscore user alright so this is a foreign key which references to that user record that we have inserted in the users table similarly I'm going to create one more for admin I'm gonna say admin user has the role role admin alright so now I have done both the things that spring security did by default in our previous attempt so I've created the schema and I've created the data so spring security isn't initializing anything all right spring security is just hooking up to the data source and then saying okay I'm just going to use the existing data to validate any authentication attempts alright so now I can to restart this application and should still work fine I used the user password as pass and I'm able to log in look at that so we have populated this database and we are able to add values by default and then spring security is just looking it up and this is the common use case you don't typically tell spring security to create users the users are already created and spring security just look setup in order to verify authentication all right moving on there are a couple of things that you need to know in order to work with the real databases the first thing is well what happens if the schema is different right we've used the default schema but let's say your application your database stores users differently they they have a different table for users let's say it's my users for example now how do you tell spring security to look at that rather than expect the default schema because it's it's not flexible if spring security requires you to have a specific name and a specific structure for these tables well good news is spring security does not require you to do it this is just a default behavior you can tell spring security if you have a different schema so that spring security knows what tables to query and how to query alright the way to do this is by using these two method calls alright so these methods are called users by using inquiry and authorities by username query this lets you pass queries that you want spring security to run in order to get the users and the authorities what you're seeing here the couple of strings that you're seeing here are the default values right so what you're doing is you're selecting the user name/password and enabled from the user's table and then user name and authority from the authorities table right so these are the default values that spring security expects so these two method calls over here they don't actually need to happen because that's the default but let's say you want to override these queries you can do that over here all right so here I can override the table name the column name and this query is what spring security is gonna run in order to get the username and the authorities when it does the authentication all right so here I can change the table name to my users right so let's say this is my table name that it is in my system right this is where you override it so this kind of gives you the flexibility to work with any kind of schema or data that you already have you just find spring security to the data source and you tell it what queries to run and as long as it gets these three values - username password and enable for the username query and then it gets the username and the authority for the authorities query spring security is happy it just does what it needs to do so you have to do some sequel manipulation if your data is a little bit different right so this is the first thing so schemas are super flexible how about databases databases are super flexible as well I told you how the data source is default here because it's an h2 database how about you have like an Oracle database somewhere else so the answer is very simple you just go to your application or properties file and then configure the data source over here you can say spring the data source data URL and give the connection string for your external database you can specify the username and password over here or there could be a bunch of different ways in which you configure the data source if you have an external database you probably have the data source already available in which case you just inject that data source to this method over here right so basically it this basically works off of the data source that you pass in so if you have an external database passing that external data source for as a different schema passing those queries and then you basically have told everything that spring security needs in order to do this authentication and that's how this works so in this video you've learned how to have spring security read users off of a database in order to do authentication so we've used JDBC directly here the approach is a little different if you using JPA especially if you are using a dao class something related to spring data you use JPA repository the approach is a little different so check this video out to learn how to configure spring security to work with your database using JPA i'll see you there 