[ Event 목록 조회 API ]

이벤트 컨트롤러 테스트
    @Test
    @TestDescription("30개의 이벤트를 10개씩 표시하는 페이지의 두번째 페이지 표시")
    public void queryEvents() ... {
        // Given
        // 이벤트가 30개 있어야 한다.
        IntStream.range(0,30).forEach(i -> {
            this.generateEvent(i);
        });

        // When, Then
        mockMvc.perform(get("/api/events")
                .param("page","1") // 0부터 시작, 즉 두번째 페이지
                .param("size","10") // 한 페이지에는 10개의 이벤트가 있다.
                .param("sort","name,DESC") // 이벤트는 name 필드의 내림차순으로 정렬해서 표시한다
            )
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(jsonPath("page").exits())
        ;
    }

테스트에서 이벤트 생성 함수 구현
    @AutoWired
    EventRepository eventRepository;

    private Event generateEvent(int id) {
        Event event = Event.builder()
                .name("event " + id)
                .description("test event")
                .beginEnrollmentDateTime(LocalDateTime.of(2018, 9, 1, 0, 0))
                .closeEnrollmentDateTime(LocalDateTime.of(2018, 10, 31, 0, 0))
                .beginEventDateTime(LocalDateTime.of(2018, 11, 23, 14, 0))
                .endEventDateTime(LocalDateTime.of(2018,11,24,14,0))
                .basePrice(0)
                .maxPrice(0)
                .limitOfEnrollment(100)
                .location("...")
                .build();

        return eventRepository.save(event);
    }

테스트 실패! 405. /api/events" url 매핑은 있는데 GET 요청을 지원하지 않아서
컨트롤러
    @GetMapping
    public ResponseEntity queryEvents(Pageable pageable) { // 페이징과 관련된 기능 제공
        return ResponseEntity.ok(this.eventRepository.findAll(pageable));
        // body 에 Page<Event>가 들어감
        // 응답으로 200 OK 가 돌아온다.
    }

테스트 실패!
    응답
        {
            "content":[10],
            "pageable":{
                "sort":{
                    "sorted":false,
                    "unsorted":true,
                    "empty":true
                },
                "offset":10,
                "pageSize":10,
                "pageNumber":1,
                "paged":true,
                "unpaged":false
            },
            "last":false,
            "totalPages":3,
            "totalElements":30,
            "size":10,
            "number":1,
            "sort":{
                "sorted":false,
                "unsorted":true,
                "empty":true
            },
            "numberOfElements":10,
            "first":false,
            "empty":false
        }
    page -> pagable 로 나옴


페이지에 관련된 링크가 없다.
페이지를 리소스로 바꿔서 링크정보를 추가하자
이벤트 컨트롤러
    @GetMapping
    ...(Pageable pageable, PagedResourcesAssembler<Event> assembler) {
        Page<Event> page = this.eventRepository.findAll(pageable);
        PagedModel<EntityModel<Event>> pagedEntityModel = assembler.toModel(page);
        return ResponseEntity.ok(pagedEntityModel);
    }
    // 페이지와 관련된 링크 정보들도 기본으로 본문으로 넘겨준다
    // 이전 페이지? 첫 페이지? 다음 페이지 등등

테스트 실행! json 응답 데이터
    {
        "_embedded":{
            "eventList":{
                {
                    "id":11,
                    "name":"event 10",
                    "description":"test event",
                    "beginEnrollmentDateTime":"2018-09-01T00:00:00",
                    "closeEnrollmentDateTime":"2018-10-31T00:00:00",
                    "beginEventDateTime":"2018-11-23T14:00:00",
                    "endEventDateTime":"2018-11-24T14:00:00",
                    "location":"...",
                    "basePrice":0,
                    "maxPrice":0,
                    "limitOfEnrollment":100,
                    "offline":false,
                    "free":false,
                    "eventStatus":null
                },
                ...
            }
        },
        "_links":{
            "first":{
                "href":"http://localhost:8080/api/events?page=0&size=10"
            },
            "prev":{
                "href":"http://localhost:8080/api/events?page=0&size=10"
            },
            "self":{
                "href":"http://localhost:8080/api/events?page=1&size=10"
            },
            "next":{
                "href":"http://localhost:8080/api/events?page=2&size=10"
            },
            "last":{
                "href":"http://localhost:8080/api/events?page=2&size=10"
            }
        },
        "page":{
            "size":10,
            "totalElements":30,
            "totalPages":3,
            "number":1
        }
    }


json을 뷰에 담는다고 생각해 볼 때
이벤트 목록과 첫/이전/다음/마지막 페이지로의 링크는 있지만 각각의 이벤트로 이동하는 링크가 없음
이벤트를 이벤트 리소스로 변경해서 받아 이벤트에 관한 링크를 추가하자
이벤트 컨트롤러
    ... queryEvents(Pageable pageable, PagedResourcesAssembler<Event> assembler) {
        ...
        assembler.toResource(page, e -> new EventResource(e));
        return ...
    }

테스트
    .andExpect(jsonPath("_embedded.eventList[0]._links.self").exists())

테스트 성공!


링크가 있어야 한다.(self, profile, create)
프로필에 대한 링크가 있으려면 문서화 작업을 추가해야 한다
테스트
    .andExpect(jsonPath("_links.self").exists())
    .andExpect(jsonPath("_links.profile").exists())
    .andDo(document("query-events"))

Page가 EntityModel<Page>로 바뀌면 링크를 추가할 수 있다.
컨트롤러
    ... queryEvents(...) {
        ...
        PagedModel<EventResource> pagedEntityModel = assembler.toModel(page, e -> new EventResource(e));
        pagedEntityModel.add(new Link("/docs/index.html#resources-events-list").withRel("profie"));
        ...
    }

문서화는 패스. 더 작성하긴 해야 함
ex)
    _links.first는 첫 페이지로 이동이다
    _links.prev 이전 페이지로 이동을 뜻한다
    page.size 한 페이지에 표시되는 이벤트의 갯수
    page.number 0페이지부터 시작한다.
    ...
