51. 핸들러 메소드 14부: ResponseEntity (파일 다운로드)

파일 리소스를 읽어오는 방법
    ● 스프링 ResourceLoader 사용하기 - 스프링 핵심 기술 강좌 참고

파일 다운로드 응답 헤더에 설정할 내용
    ● Content-Disposition: 사용자가 해당 파일을 받을 때 사용할 파일 이름
    ● Content-Type: 어떤 파일인가
    ● Content-Length: 얼마나 큰 파일인가

파일의 종류(미디어 타입) 알아내는 방법
    ● http://tika.apache.org/

ResponseEntity
    ● 응답 상태 코드
    ● 응답 헤더
    ● 응답 본문
    // 위의 세가지를 return 할 수 있다.


    @GetMapping("/file/{filename}")
    @ResponseBody
    public ResponseEntity<Resource> fileDownload1(@PathVariable String filename) throws IOException {
        Resource resource = resourceLoader.getResource("classpath:"+filename);
        File file = resource.getFile();

        Tika tika = new Tika();
        String mediaType = tika.detect(file);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachement; filename=\"" + resource.getFilename() + "\"")
                .header(HttpHeaders.CONTENT_TYPE, mediaType)
                .header(HttpHeaders.CONTENT_LENGTH, file.length() + "")
                .body(resource);
        ;
    }

참고
    ● https://spring.io/guides/gs/uploading-files/
    ● https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
    ● https://www.baeldung.com/java-file-mime-type



[실습]
    resources/file.txt 추가

    // 메소드 리턴값: ResponseEntity<T>
    // T? 응답의 본문에 대한 데이터 타입
    @Controller
    class FileDownloadController {
        @Autowired
        ResourceLoader resourceLoader;
        // 리소스 로더를 사용해서 리소스를 찾아올 수 있다.
        // 스프링 프레임워크 핵심기술에서 다뤘음

        @GetMapping("/file/{filename}")
        public ResponseEntity<Resource> fileDownload(@PathVariable String filename) throws IOException { // PathVariable -> URI 에서 찾는다
            Resource resource = resourceLoader.getResource("classpath:" +filename);
            File file = resource.getFile();

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachement; filename=\"" + resource.getFilename() + "\"")
                    // 사용자가 해당 파일을 받을 때 사용할 파일 이름
                    .header(HttpHeaders.CONTENT_TYPE, "image/jpg")
                    // 파일의 타입
                    // 지금이야 jpg인걸 알지만 파일이 어떤 확장자인지 알아내서 적을 수도 있다.
                    .header(HttpHeaders.CONTENT_LENGTH, file.length() + "")
                    // 파일의 크기. 헤더는 문자열이어야한다(-> +"")
                    .body(resource)
                    // 바디에 리소스를 넣어주면 다운로드가 가능하다
            ;
        }
    }

* 실행
    http://localhost:8080/file/ex1/file.txt

* Tika를 이용해서 데이터 타입 알아오기

    tika-core dependency 추가
    // 파일의 미디어 타입을 알아오는 라이브러리

    @GetMapping("/file/{filename}")
    public ResponseEntity<Resource> fileDownload(@PathVariable String filename) { // URI에서 filename 을 찾는다
        ...

        Tika tika = new Tika(); // 재사용되니까 빈으로 등록해서 사용하는 방법도 있다.
        String mediaType = tika.detect(file);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_TYPE, mediaType)
                ...
        ;
    }

* 실행

* F12 눌러서 요청 확인해보기

* Resource 자체를 리턴해도 된다.
    @GetMapping("/file/{filename}")
    @ResponseBody
    public Resource fileDownload(@PathVariable String filename) {
        Resource resource = resourceLoader.getResource("classpath:"+filename);
        return resource;
    }