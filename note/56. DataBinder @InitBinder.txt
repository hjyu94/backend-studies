56. DataBinder: @InitBinder

특정 컨트롤러에서 바인딩 또는 검증 설정을 변경하고 싶을 때 사용
    @InitBinder
    public void initEventBinder( WebDataBinder webDataBinder) {
        webDataBinder.setDisallowedFields("id");
    }

바인딩 설정
    ● webDataBinder.setDisallowedFields();

포매터 설정
    ● webDataBinder.addCustomFormatter();

Validator 설정
    ● webDataBinder.addValidators();

특정 모델 객체에만 바인딩 또는 Validator 설정을 적용하고 싶은 경우
    ● @InitBinder(“event”)

참고
    ● https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann -initbinder
    ● https://github.com/spring-projects/spring-petclinic/blob/master/src/main/java/org/springfra mework/samples/petclinic/owner/PetController.java




[실습]
    @Controller
    public class InitBinderExController {

        @InitBinder
        public void initEventBinder(WebDataBinder webDataBinder) {
            webDataBinder.setDisallowedFields("id");
        }
    }
    // 리턴 타입은 반드시 void 여야 한다
    // webDataBinder 아규먼트가 반드시 있어야 한다. 얘를 이용해서 커스터마이징한다.
    // 모든 요청을 처리하기 전에 @InitBinder 메소드를 호출한다.


[1] 바인딩
    webDataBinder.setDisallowedFields("id");
    // 받고 싶지 않는 필드를 정의해줄 수 있다.
    // id 는 이벤트를 저장할 때 생성하는 값으로 form, query path, query parameter ... 등으로 받아오고 싶지 않다!
    // id 값을 주더라도 null 이 들어오게 된다.

    form 에서 id를 받아오더라도 null 처리가 된다.


[2] 포매터
    (1)
        @DateTimeFormat(pattern = "yyyy-MM-dd")
        private LocalDate Event.startDate;
    (2)
        @DateTimeFormat(iso = DateTimeFormat.ISO_DATE)
        private LocalDate Event.startDate;

    이 어노테이션을 이해하는 포매터가 이미 등록이 되어 있기 때문에
    바로 필드명 위에 @DateTimeFormat를 붙일 수 있다.

    form에서 startDate 를 받아와보자.
    처리하는 핸들러에서 중단점 찍어서 확인하기
    우리는 "2020-01-23" 문자를 줬지만 LocalDate 타입으로 값이 들어온다.
    (포매터 프로퍼티 에디터 컨버터 등 여러가지가 있는데 웹과 관련해서는 포매터를 쓴다고 생각하면 된다.)

    해당 컨트롤러 내의 핸들러들에서 커스텀한 포매터가 필요한 경우!
    webDataBinder.addCustomFormatter(new myFormatter());
    로 포매터를 추가할 수 있다.


[3] Validator
    만약에 name 필드에 특정한 값이 들어오는 걸 원하지 않는다.
    그럴땐 @NotBlack 처럼 간단하게 어노테이션으로 지정하기 어렵다.
    커스텀한 Validator 를 만들자.

    public class EventValidator implements Validator {
        @Override
        public boolean supports(Class<?> aClass) {
            return Event.class.isAssignableFrom(aClass);
        }
        // 어떠한 도메인 클래스에 대한 validation을 지원하는지?

        @Override
        public void validate(Object o, Errors errors) {
            Event event = (Event) o;
            if (event.getName().equalsIgnoreCase("aaa")) {
                errors.rejectValue("name", "wrongValue", "the value is not allowed";);
            }
        }
        // aaa 를 이름으로 쓴 경우
        // name 필드의 값이 잘못된 겉 같다는 에러 메세지를 뿜자.
    }

    (1) @InitBinder 에서 사용
        @InitBinder
        public void initEventBinder(WebDataBinder webDataBinder) {
            webDataBinder.setDisallowedFields("id");
            webDataBinder.addValidators(new EventValidator());
        }

    (2) 빈으로 주입받아 사용
        EventValidator를 @Component로 변경

        @Component
        class EventValidator_2 implements Validator {
            @Override
            public boolean supports(Class<?> aClass) {
                return Event.class.isAssignableFrom(aClass);
            }

            @Override
            public void validate(Object o, Errors errors) {
                Event event = (Event) o;
                if (event.getName().equalsIgnoreCase("aaa")) {
                    errors.rejectValue("name", "wrongValue", "the value is not allowed");
                }
            }
        }

        @Controller
        public class InitBinderExController {
            @Autowired
            EventValidator eventValidator;

            @PostMapping("/events")
            public String createEvents(RedirectAttributes attributes, @Valid Event event, BindingResult bindingResult)
            {
                eventValidator.validate(event, bindingResult);
                ...
            }
         }

    (3) 빈으로 주입받아 사용 Validator 상속받지 않아도 됨
        @Component
        class EventValidator_3 {
            public void validate(Object o, Errors errors) {
                Event event = (Event) o;
                if (event.getName().equalsIgnoreCase("aaa")) {
                    errors.rejectValue("name", "wrongValue", "the value is not allowed");
                }
            }
        }

[4] 특정 모델 객체에만 바인딩 또는 Validator 설정을 적용하고 싶은 경우
    @InitBinder("event")
    public void initEventBinder( WebDataBinder webDataBinder) {
        webDataBinder.setDisallowedFields("id");
        webDataBinder.addValidators(new EventValidator());
    }
    event 모델 객체를 바인딩 받을때에만 initEventBinder를 적용하게 된다.
