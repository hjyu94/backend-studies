20. 포매터 추가하기

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servl et/config/annotation/WebMvcConfigurer.html#addFormatters-org.springframework.format.Forma tterRegistry-


Formatter
    ● Printer: 해당 객체를 (Locale 정보를 참고하여) 문자열 로 어떻게 출력할 것인가
    ● Parser: 어떤 문자열 을 (Locale 정보를 참고하여) 객체로 어떻게 변환할 것인가


https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/format/Fo rmatter.html


포매터 추가하는 방법 1
    ● WebMvcConfigurer의 addFormatters(FormatterRegistry) 메소드 정의


포매터 추가하는 방법 2 (스프링 부트 사용시에만 가능 함)
    ● 해당 포매터를 빈으로 등록


실습
    WebMvcConfigurer 를 사용하는 법 - 포매터 사용해보기

    새 프로젝트 springInitialize
    demobootweb
    web만 추가해서 만듦

[1] 스프링 - 포매터를 WebConfig에 등록하여 사용 (부트가 만들어주는 자동 mvc 빈 제외)
(1) url path variable 사용

    새 프로젝트 SpringInitializer
    Spring web만 추가해서 만듦

    @RestController
    public class SampleController {
        @GetMapping("/hello/{name}")
        public String hello(@PathVariable String name) {
            return "hello " + name;
        }
    }
    URL path 로 name을 받겠다.

    hello() Test 생성 - junit4

    @RunWith(SpringRunner.class)
    @WebMvcTest // 웹과 관련된 계층만 테스트함, MockMvc를 자동으로 주입받아 사용해서 테스트 할 수 있어진다.
    public class SampleControllerTest {
        @Autowired
        MockMvc mockMvc;

        @Test
        public void hello() throws Exception {
            this.mockMvc.perform(get("/hello/hjeong"))
                    .andDo(print())
                    .andExpect(content().string("hello hjeong"));
        }
    }
    테스트 실행
    성공!

    이런 상황에서 포매터를 사용해보자.

    포매터?
    어떠한 객체를 문자열로 변환하거나 반대로 변환할때 사용한다.

        @GetMapping("/hello/{name}")
        public String hello(@PathVariable("name") Person person) {
            return "hello " + person.getName();
        }
        name을 받아서 Person 객체로 변환한 뒤
        그 객체의 메소드를 이용해서 이름을 받아오고 싶다.

        public class Person{
            private String name;
            //getter
        }

    테스트 실행!
    실패!
    name 으로 들어오는 문자열을 Person 객체 타입으로 변환할 수 없기 때문에

    포매터를 만들어서 해결하자
        public interface Formatter<T> extends Printer<T>, Parser<T> {
        }
        // Formatter = Printer + Parser

        public class PersonFormatter implements Formatter<Person> {
            @Override
            public Person parse(String s, Locale locale) throws ParseException {
                Person person = new Person();
                person.setName(s);
                return person;
            }

            @Override
            public String print(Person person, Locale locale) {
                return person.getName();
            }
        }

    포매터를 등록하는 방법
    WebConfig에 포매터 레지스트리를 제공하는 addFormatter를 구현하면 된다.
        @Configuration
        public class WebConfig implements WebMvcConfigurer {
            @Override
            public void addFormatters(FormatterRegistry registry) {
                registry.addFormatter(new PersonFormatter());
                // registry.addConverter(new Converter());
                // 포매터보다 좀더 제네럴한. 굳이 문자열이 아닌 객체 변환. 자바객체<->자바객체 변환에 사용
            }
        }


    포매터 등록 후 테스트 실행!
    성공!

    localhost:8080/hello/hjeong로도 동작한다.


(2) Request Parameter 사용
    URL path 뿐만 아니라 @RequestParam로도 동작한다.
    localhost:8080/hello?name=hjeong
    이런식으로 요청하는 경우

        @GetMapping("/hello/{name}")
        public String hello(@RequestParam("name") Person person) {
            return "hello " + person.getName();
        }


        @Test
        public void hello() throws Exception {
            this.mockMvc.perform(get("/hello")
                        .param("name", "hjeong"))
                    .andDo(print())
                    .andExpect(content().string("hello hjeong"));
        }

    테스트 실행!
    성공!

[2] 스프링 부트 - 포매터를 빈으로만 등록하면 된다.

    사실 [스프링부트]를 쓰고있다면 WebConfig가 없어도 된다.
    포매터가 빈으로 등록되어있다면 자동설정하에서 Formatter.class 들을 모두 빈으로 등록해준다.

    @Component
    public class PersonFormatter implements Formatter<Person> {
        ...
    }


    [스프링부트]
    자동설정 하에 Component 로 포매터등록
    테스트는 깨짐
    (Test에 있는 WebMvcTest는 Component로 등록한 포매터는 웹과 관련된 빈이라고 인식하지 못함->즉 테스트에서는 포매터를 사용 못하는 상태인것)

    @SpringBootTest (웹과관련된빈이아니라 @SpringBootApplication이 붙어있는 곳부터 시작햇서 모든빈을 다 등록. 통합테스트로 변경)
    그러면 mockMvc가 자동으로 빈으로 등록되지 않기 때문에
    @AutoConfigureMockMvc를 써줘야 한다.

    테스트!
    성공!
