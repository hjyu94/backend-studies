[ Events 수정 API ]
이벤트를 수정하는 API

테스트 할 것
    수정하려는 이벤트가 없는 경우 404 NOT_FOUND
    입력 데이터 (데이터 바인딩)가 이상한 경우에 400 BAD_REQUEST
    도메인 로직으로 데이터 검증 실패하면 400 BAD_REQUEST
    (권한이 충분하지 않은 경우에 403 FORBIDDEN)
    정상적으로 수정한 경우에 이벤트 리소스 응답

테스트
    @Autowired
    ModelMapper modelMapper;

    @Test
    @TestDescription("이벤트를 정상적으로 수정하기")
    public void updateEvent() throws Exception {
        // Given
        Event event = this.generateEvent(200);
        EventDto eventDto = modelMapper.map(event, EventDto.class);
        String newName = "Updated Event";
        eventDto.setName(newName);

        // When Then
        this.mockMvc.perform(put("/api/events/{id}", event.getId())
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .content(this.objectMapper.writeValueAsString(eventDto))
                )
            .andDo(print())
            .andDo(document("update-event"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("name").value(newName))
            .andExpect(jsonPath("_links.self").exists())
        ;
    }

    @Test
    @TestDescription("입력값이 비어있는 경우에 이벤트 수정 실패")
    public void updateEvent400_Empty() throws Exception {
        // Given
        Event event = this.generateEvent(200);
        EventDto eventDto = new EventDto();

        // When Then
        this.mockMvc.perform(put("/api/events/{id}", event.getId())
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .content(this.objectMapper.writeValueAsString(eventDto))
                )
            .andDo(print())
            .andExpect(status().isBadRequest())
        ;
    }

    @Test
    @TestDesc("입력값이 잘못되어 있는 경우에 이벤트를 수정 실패")
    public void updateEvent400_Wrong() throws Exception {
        // Given
        Event event = this.generateEvent(200);

        EventDto eventDto = this.modelMapper.map(event. EventDto.class);
        eventDto.setBasePrice(20000);
        eventDto.setMaxPrice(1);

        // when then
        this.mockMvc.perform(put("/api/events/{id}", event.getId())
                    .contentType(MediaType.JSON)
                    .content(this.objectMapper.writeValueAsString(eventDto))
                )
            .andDo(print())
            .andExpect(status().isBadRequest());
    }

    @Test
    @TestDesc("존재하지 않는 이벤트 수정 실패")
    public void updateEvent404() throws Exception {
        // Given
        Event event = this.generateEvent(200);
        EventDto eventDto = this.modelMapper.map(event. EventDto.class);

        // when then
        this.mockMvc.perform(put("/api/events/98765123")
                    .contentType(MediaType.JSON)
                    .content(this.objectMapper.writeValueAsString(eventDto))
                )
            .andDo(print())
            .andExpect(status().isNotFound());
    }

테스트 실행! 깨짐!
이벤트 컨트롤러
    @PutMapping("/{id}")
    public ResponseEntity(@PathVariable Integer id
                        , @RequestBody @Valid EventDto eventDto // 요청의 본문으로 들어오는 EventDto
                        , Errors errors) {
        Optional<Event> optionalEvent = this.eventRepository.findById(id);
        if (optionalEvent.isEmpty()) {
            return ResponseEntity.notfound().build();
        }

        if (errors.hasErrors()) { // @NotEmpty, @NotNull, @Min, ...
            return badRequest(errors);
        }

        this.eventValidator.validate(eventDto, errors); // business logic
        if (errors.hasErrors()) {
            return badRequest(errors);
        }

        Event existingEvent = optionalEvent.get();
        [1]
            existingEvent.setName(eventDto.getName());
            // ...
        [2]
            this.modelMapper.map(eventDto, existingEvent); // ModelMapper.map(src, desc);

        Event savedEvent = this.eventRepository.save(existingEvent);
        // dirty checking 이 일어나지 않기 때문에 (existingEvent 값을 변경한다고 저장되지 않는다)
        // 명시적으로 repository.save() 호출해야 한다.
        // dirty checking 을 하려면 service 를 사용해야 한다.

        EventResource eventResource = new EventResource(savedEvent);
        eventResource.add(new Link("/docs/index.html#resources-events-update").withRel("profile"));
        return ResponseEntity.ok(eventResoucre);
    }

테스트 실행! 성공!
