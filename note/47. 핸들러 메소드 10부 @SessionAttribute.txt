47. 핸들러 메소드 10부: @SessionAttribute

메소드 아규먼트로 세션에 있는 데이터를 찾아서 쓰자!
(HttpSession 을 아규먼트로 받아서 쓰는것과 유사)

HTTP 세션에 들어있는 값 참조할 때 사용
    ● HttpSession을 사용할 때 비해 타입 컨버전을 자동으로 지원하기 때문에 조금 편리함.
    ● HTTP 세션에 데이터를 넣고 빼고 싶은 경우에는 HttpSession을 사용할 것. @SessionAttributes와는 다르다.
    ● @SessionAttributes는 해당 컨트롤러 내에서만 동작.
        ○ 즉, 해당 컨트롤러 안에서 다루는 특정 모델 객체를 세션에 넣고 공유할 때 사용.
    ● @SessionAttribute는 컨트롤러 밖(인터셉터 또는 필터 등)에서 만들어 준 세션 데이터에 접근할 때 사용한다.


[실습]

    SessionAttributes는 어노테이션을 붙인 해당 클래스 안에서만 작용한다.
    애노테이션에 설정한 이름에 해당하는 모델 정보를 자동으로 세션에 넣어준다.
    이름에 해당하는 모델이 ModelAttribute에 넣어준 모델에 있을 경우 세션에 넣어주고
    SessionStatus를 사용해서 정리할 수 있는 것
    여러 컨트롤러에 거쳐서 적용되진 않는다.

    특정 컨트롤러밖에서 서블릿 필터나 서블릿 인터셉터에서 세션에 무언갈 넣어뒀다가
    가져와서 쓰고 싶은 경우 @SessionAttribute 를 사용할 수 있다.
    세션에 있는 데이터를 그 데이터 타입 그대로 읽어올 수 있는 어노테이션


    웹사이트에 접속한 시간이 세션에 없으면 기록하는 인터셉터를 만들어 보자.

    public class VisitTimeInterceptor implements HandlerInterceptor {
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            HttpSession session = request.getSession();
            if(session.getAttribute("visitTime") == null)
            {
                session.setAttribute("visitTime", LocalDateTime.now());
            }
            return true; // 다음 인터셉터나 핸들러에게도 요청을 전달하라
        }
    }

    인터셉터를 하나 만들었으니 WebMvc에 등록하자
    @Configuration
    public class WebConfig implements WebMvcConfigurer {
        @Override
        public void addInterceptors(InterceptorRegistry registry) {
            registry.addInterceptor(new VisitTimeInterceptor());
        }
    }
    // 모든 요청을 처리할 때 이 인터셉터가 사용이 된다.
    // 모든 요청을 처리할 때 세션에 visitTime 이 없으면 넣어준다.

    @Controller
    class SessionAttributeExController {
        @GetMapping("/sessionattribute/ex/1")
        @ResponseBody
        public String PrintVisitTime1(@SessionAttribute LocalDateTime visitTime)
        {
            return "visit tiem: " + visitTime.toString();
        }

        @GetMapping("/sessionattribute/ex/2")
        @ResponseBody
        public String PrintVisitTime2(@SessionAttribute("visitTime") LocalDateTime XXX)
        {
            return "visit tiem: " + XXX.toString();
        }

        @GetMapping("/sessionattribute/ex/3")
        @ResponseBody
        public String PrintVisitTime3(HttpSession httpSession)
        {
            Object visitTime = (LocalDateTime) httpSession.getAttribute("visitTime");
            return "visit tiem: " + visitTime.toString();
        }
    }

    앱 시작!
    로그에 세션에 처음 기록된 시간이 계속 찍힌다.

    HTTPSession 다른 점?
    TypeConviersion을 자동으로 해줌

    @GetMapping("/events/list")
    public String getEvents(Model model, HttpSession httpSession)
    {
        Object visitTime = (LocalDateTime) httpSession.getAttribute("visitTime")
        // LocalDateTime 이 아니라 Object로 나옴
    }
