What is the structure of a JWT 

in this tutorial we will understand the structure of a JWT we will see how a GWT is created what the parts of the token are and how you can construct and deconstruct a GWT yourself you'll also look at some of the implications of this GWT structure and some of the resulting advantages and disadvantages of using GWT s for authorization kind of as a direct result of Harvard structured [Music] a JWT is in a sense a json token alright if you aren't familiar with trade abilities i highly recommend you check out this tutorial first before tackling this one go on await ok now that you know what the kind of problems that GWT is meant to solve let's look at how GWT has been structured in order to solve those problems starting with understanding what GWT looks like so here's a sample Jade ability doesn't really look like JSON does it looks like a bunch of random characters however there are a few things that you can infer from this token that you're seeing on your screen and this is what 99.999% of jade abilities out there are gonna look like first of all notice that there are three different colors that this text is written and it's kind of like you've split the token into three different parts most Jade of the T's do have these three parts separated by period right so you see this there is one period over here and then there is one period over here which essentially separates this whole token into three different parts and that's what these three colors are indicating a typical GWT does consists of three parts so you have the main part the core which is the payload which is the JSON that you do need to exchange this payload part is surrounded by two parts there's one part at the top and one part at the bottom the part at the top is called the header and then there is a part at the bottom which is the signature the best way to understand the structure of JWT and to play with it is by going to this website called GWT dot IO this is probably one of the first results you will get when you search for jet ability on any search engine the cool thing about GWT dot io is this debugger section where you can actually play with JWT in real time you can type in the encoded JWT and then it actually splits it into the three components the header the payload in the signature and it shows you those three components over here and vice versa you can change these values and have the incorrigibility be reflected so this is a great place for us to kind of play with hands on and understand how agility structure JWT is a value token the whole point of creating a Jade ability is to send some value from the server to the client so that the client can send it back on subsequent requests so it's basically the server saying hey I what indicated you and here's the proof of me authenticating you the next time you give me a request I will have no idea who you are so send me this token as a part of every other question I don't know who you are right so that's the whole point of a JWT and the value that is being sent is the payload here right so let's say I authenticate on a website the website says ok now I know that this user is Kaushik so it creates a JSON payload with name is Kaushik the ID is the ID in the system and then this one is a issue that you can have more information here so this one is tracking like Ben was this token issued you can have a bunch more information here nothin confidential you don't to put something like a password here but anything that lets you identify who that user is you put it over here and the server sends it back so the middle portion the payload portion of the Jade ability is basically the data that you want to send encoded in base64 right you don't know base64 encoding is a way for you to convert strings like this into characters a string of characters which don't have some special characters or parentheses or braces or quotes like this which make it very difficult to deal with in many languages so this value if I go to base64 decoded I'm gonna get the payload and I can demonstrate this by going to one of the many websites which let you do base64 encoding and decoding online so I just pasted that encoded payload base64 decode is gonna give me the actual payload all right so that's the middle part of it so this is the actual value you want to send base64 encoded all right just this is not enough right you want to have a signature because I can create this payload and say my name is Bill Gates and Senator web application the web application shouldn't ideally trust us right anybody can do this base64 encode and decode now the header and the signature is what lends our the city do this JWT alright so the header tells how this is being signed so header is another JSON object which has the type value which is his shield ability potentially to allow for any other types of tokens which might come up in the future and the algorithm tells what's the algorithm used to verify the signature right so this is another JSON object and this is also base 64 encoded and put on the header okay so if I were to take this and convert it to a base64 decore here you see I get that same object back stripped off spaces as you can see here so the header and the payload are both visible pretty much in plain sight right so anybody can take the first two portions and say okay this is the payload this is the content that this Jade of the T token contains and this is the algorithm used for signing it so the whole thing about converting gwt's into base64 encoded strings is just for convenience it's not far hiding anything anybody can take or Jade ability and learn what the payload is now the whole reason why we have a signature is not to encrypt or to decrypt the Jade ability it is for the server to validate if this is actually correct right so here's what the server does then somebody authenticates it creates this payload it creates this header algorithm but then it figures out what the signature is it signs the stokin by adding the string here which only it can calculate alright so this string is possible to be computed only by the server that's issued the token this way the authenticity of the Jade ability comes with the picture the server creates the signature and attaches it to the JWT and sends it back the client if it's a valid client it just sends it as is and there is no problem there but if there is a malicious client they changed the value here well the signature is computed for the original value it's no longer going to match for this new value if to tamper with this thing well the server's gonna say well this signature is not the right signature for the value that you're sending me here so this is not a valid GWT all right now how does it create the signature and how does it verify the signature the signature is created using this algorithm here notice that this algorithm the same as the algorithm value in the header and this is what let's a single server possibly deal with multiple algorithms and multiple capabilities they might say well hang on if the algorithm is out in the open in the header can someone else apply the same algorithm and figure out the signature the no because this algorithm requires a secret key which only the server has and that's the reason why only the server can come up with the value even though the algorithm used to compute the value is out in the open this is what's referred to as a cryptographic hash so the signature is calculated using something like this it's doing a base64 URL encode of the header which is basically this portion plus dot plus base64 URL encode of the payload which is this portion so basically this value plus dot plus this value is going to give you this portion of the JWT all right so it's gonna take this whole portion and it is going to sign it with a specific secret key let's say my secret key is secret all right it's going to sign this particular value with this key so that the value that's computed from this function so the value that's resulting in this third portion is really tied to the values over here now if this were to change this also has to change okay now a malicious user can change this but they cannot change this because they need this secret to figure that out all right so the secret is going to stay on the server then the server is creating the JWT it is going to put basics different coding of the header base64 encoding of the payload which anybody can do but then the third portion is a signature which only the server can do all right so it gets that value and then it computes it using this algorithm and then it attaches it to the JWT so this should give you an idea that a JWT is pretty much open the value that the JWT contains is pretty much open and the signature is only used to verify the authenticity of it kind of think of it as like a certificate that you get right you get a certificate for something you say your name has this accomplishment its visible for everybody to see it's not hidden it's not secured but there is a signature at the bottom of the certificate which says okay I verify some authority verifies that the values and this certificate is valid the information in this certificate is valid so this is JWT so this is what's created when authentication happens and this is what the client sends back for every subsequent request so let's look at the flow of how this is created and how this is exchanged now here is that client and here is a server when the client authenticates with the server the client uses whatever authentication mechanism the user ID password token-based authentication possession based authentication whatever it is it gives some information some proof that that user is who they say they are that's never says ok i authenticated you and now it creates a JWT for future authorization purposes remember JWT is not for authentication authentication is done using whatever mechanism that identifies who the user is GWT comes into the picture for further interactions and the server says ok i've authenticated you in order for me to remember who you are in a subsequent interaction well here is your Jade of DT which is why Jade ability is specific to authorization a lot of people get this confused people think the Jade ability is an authentication mechanism well no Jade ability comes into the picture only when the authentication is complete ok now the server creates this Jade ability it has this payload that's a header there and it signs it the sign is strictly associated with the value as is now it sends it back when the client gets the JWT it can do one of multiple things it can either hold on to it in local storage or it can hold on to it in a cookie doesn't matter whatever it uses to hold on to it it has to pass it on every subsequent how does it pass it it actually uses the HTTP header for it HTTP headers are key value pairs so the key for passing this according to the JWT standard is called authorization and the value is the word bearer followed by a space followed by the JWT so the client on every subsequent request puts this in the header and sends it to the server the server examines the request checks this value in the header it says ok the authorization I have the JWT now it splits it into these three parts it figures out what the payload is it doesn't need to do any other processing for it all it has to do is to get the middle part and do basic stuff or decode it has the value already but it just doesn't take it it has to verify if this is valid so what it does is it follows this formula it does a base64 encode of the header and darden p6 fir and go to the payload which is basically this portion of the JWT and then it calculates the signature for it and verifies if it matches with the signature that it's sent if it matches then it trusts that this is the tradability that it's sent if it doesn't match well then it has its own error mechanism but it says okay now this is a tamper JWT I don't trust you and I don't let you it ok now this brings up a bunch of questions first of all the value in the chat ability is out in the open so how secure is this what a bunch of things you have to think about like I mentioned before you don't want to have any confidential information there like for example you don't wanna have the password you don't want to have the user's social security number or tax ID or birthdate or anything like that you just need just enough information for the server to know who that person is all right to establish the principle on the server second concern the signature is tied to the contents of the tradability so the jail ability cannot be tampered which is great but now what if somebody else gets hold of my Jade ability and sends it in the request they can impersonate as me right so server is just verifying the authenticity of the JWT it is not actually tying it to a specific user because the whole point of JWT is to not remember anything else it's to just go off off the value that is sent so if I can send the state ability and get authorization someone else can steal my JWT put it into the header of the exact same way and get authorized won't that work well yes technically it will work which is why you have to be careful about how you're transmitting JWT it has to be in an HTTPS connection and then it has to be in conjunction with a bunch of other established authentication and authorization mechanism one very common way of using GWT is using the process of auth for authenticating and authorizing and what comes with its own security protections to make sure that people don't steal cheat abilities all right the third challenge with trade ability and the possibly the disadvantage of trade ability is this when compared to session based authentication now let's say somebody does steal your JWT what can you do about it in the case of session IDs let's say somebody knows that your session ID is stolen like I'm authenticated with a server and I realize that someone else has stolen my session ID I can log off right it ends the session and that session doesn't exist anymore sessions can expire or sessions can be terminated when there is a need to do so what about gwt's there is nothing on the server to end the whole information is inside the JWT you can of course set up expiration for cheat abilities right so we learnt of you can have any payload you can have issued at payload you can have expiration payloads and you can say okay when the cheat ability is returned from the client and it's already expired the server doesn't have to honor it which is fine but how do you log off something well the way to do this in GWT is a little bit tricky since there is nothing to end on the server the way people handle it is by having some blacklisted chat abilities so let's say the server issues me a JWT and I tell the server hey somebody has stolen my JWT well what the server can do is maintain stay on the server maintain a list of blacklisted JWT sensei okay this particular Jade ability is blacklisted so when somebody tries to access the debt Jade ability it compares with this blacklist and says okay is the state ability among the list that has been blacklisted in which case don't authorize this right so it's a workaround and it's not ideal but this is also another disadvantage off gwt's so in this tutorial we learned how JWT is structured how it's exchanged between the client and the server and some of the disadvantages including the visibility it's not private and have your handle stealing or expiry of Jade ability tokens what you saw using an online interface that utility Daario can be done using libraries in a bunch of different languages you have Jade ability libraries for Java Jade ability libraries for JavaScript Python you can use those libraries to give a payload and a header and then calculate the wholesale ability out of it this is the next question is how do you implement Jade ability based authentication and authorization in a web application or does the end-to-end flow work so check out this tutorial where I walk through the concepts that you have learned so far and they actually implemented in a Java spring application so check this out and I'll see you there [Music] 


