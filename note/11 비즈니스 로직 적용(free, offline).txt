11 비즈니스 로직 적용(free, offline)

basePrice, maxPrice
-> 이 이벤트가 무료인지? 유료인지?

location is null or nonNull?
-> 오프라인인지? 온라인인지?

ControllerTest
    정상적으로 이벤트를 생성하는 테스트
    @Test
    @TestDescription("정상적으로 이벤트를 생성하는 테스트")
    public void createEvent() throws Exception {
        EventDto eventDto = EventDto.builder()
                .basePrice(0)
                .maxPrice(0)
                .location("강남역 D2 스타텁 팩토리")
                ...
                .build();

        mockMvc.perform(post("/api/events/"))
                .andExpect(jsonPath("offline").value(false))
                .andExpect(jsonPath("free").value(true))
        ;
    }
    지금은 기본값으로 false 가 들어있음


EventTest 도메인에서도 테스트하자
    @Test
    public testFree() {
        // Given
        Event event = Event.
                .basePrince(0)
                .maxPrice(0)
                .build();

        // When
        event.update();

        // Then
        assertThat(event.isFree()).isTrue();

        // 100, 0 -> false

        // 0, 100 -> false
    }


Event.update()
    public void update() {
        if(this.basePrice == 0 && maxPrice == 0)
            this.free = true;
        else
            this.free = false;
    }

* 도메인 테스트 성공
* 컨트롤러 테스트는 실패

Controller
    event.update();
    // save 하기 전에 호출
    // update(), save() 를 EventService에게 위임할 수도 있다.

* 컨트롤러 테스트도 성공

EventTest
    @Test
    public void testOffline() {
        .location("강남역 네이버 D2 스타텁 팩토리")
        assertThat(event.isOffline()).isTrue();

        // X
        assertThat(event.isOffline()).isFalse();
    }

Event.update()
    if (location.isBlank() || location == null)
        offline = false;
    else
        offline = true;

    // String.isBlank() (Java 11 부터)
    // trim(), isEmpty() (이전 버전에서 사용법)


* 단위테스트 실행(이벤트)
* 통합 테스트실행(컨트롤러)
