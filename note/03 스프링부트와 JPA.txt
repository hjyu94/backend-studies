- MyBatis, iBatis: SQL Mapper
- JPA: 자바 표준 ORM 기술

- 객체를 관계형 데이터베이스에서 관리하는 것이 중요한데
- 그러다 보니 애플리케이션 코드보다 SQL 단순 작업이 많아지게 되더라
- 패러다임 불일치 문제
1) 관계형 데이터 베이스: 어떻게 데이터를 저장할지에 초점
2) 객체 지향 프로그래밍 언어: 메세지 기반, 기능과 속성을 한 곳에서 관리 (추상화, 캡슐화, 정보은닉, 다형성)

- JPA 를 사용하면 개발자는 객체지향적으로 프로그래밍을 하고 JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성해 실행
- 더는 SQL에 종속적인 개발을 하지 않아도 된다

# Spring Data JPA
- 추상화 단계: JPA <- Hibernate <- Spring Data JPA
- Hibernate 와 Spring Data JPA 를 쓰는 것 사이에 큰 차이가 없지만 한단계 더 감싸놓아서 좋은 점
1) 구현체 교체의 용이성
    - Hibernate 외 다른 JPA 구현로 쉽게 교체 가능
2) 저장소 교체의 용이성
    - 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체 가능
    - 트래픽이 점점 많아지면 관게형 데이터베이스로는 도저히 감당이 되지 않을 때가 올 수 있다.
    - 이 때 몽고 DB 로 교체가 필요하면 Spring Data JPA 에서 Spring Data MongoDB 로 의존성만 교체하면 된다.

# domain 패키지
- 도메인?
    : 게시글, 댓글, 회원, 정산, 결제 등 SW에 대한 요구사항 혹은 문제 영역
    : dao 패키지와는 조금 결이 다름
    : xml에 쿼리를 담고, 클래스는 오로지 쿼리의 결과만 담던일들이 도메인 클래스라고 불리는 곳에서 해결함
    : Entity, Repository 는 domain 패키지에서 같이 관리

# Spring 웹 계층
- Web Layer
    : Controller 와 JSP/Freemarker 등의 뷰 템플릿 영역
    : Filter, Interceptor, ControllerAdvice 등 외부 요청과 응답에 대한 전반적인 영역

- Service
    : 비지니스 로직을 처리하지 않는다
    : 트랜잭션과 도메인 간 순서 보장의 역할만 한다
    : Controller 와 Dao 중간 영역에서 사용
    : @Transactional 이 사용되어야 하는 영역

- Repository
    : 데이터베이스와 같이 데이터 저장소에 접근하는 영역
    : Dao 의 영역

- Dtos
    : 계층 간 데이터 교환을 위한 객체
    : 예를 들면 뷰 템플릿 엔진에서 사용될 객체나 Repository Layer에서 결과로 넘겨준 객체 등

- Domain Model
    : 도메인이라 불리는 개발 대상을 모든 사람이 동일한 관점에서 이해라 수 있고 공유할 수 있도록 단순화 시킨 것
    : 이를 테면 택시 앱에서 배치, 탑승, 요금 등이 도메인
    : @Entity 가 사용된 영역
    : 다만 무조건 데이터베이스의 테이블과 관계가 있어야 하는 건 아니고
    : VO 같은 값 객체도 이 영역에 해당됨
    : 비지니스 로직이 처리되어야 할 영역