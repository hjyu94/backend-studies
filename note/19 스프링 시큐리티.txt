19 스프링 시큐리티

스프링 시큐리티
    ● 웹 시큐리티 (Filter 기반 시큐리티)
    ● 메소드 시큐리티
    ● 이 둘 다 Security Interceptor를 사용합니다.
        ○ 리소스에 접근을 허용할 것이냐 말것이냐를 결정하는 로직이 들어있음.

    Security  -------    Security        <----- AuthenticationManager(로그인 담당)
    Context             Interceptor      <----- AccessDecisionManager(권한 확인)
    Holder
                         ^      ^
                         |      |
                      Method   Filter
                    Security   Security
                 Interceptor   Interceptor


[ 설명 ]

스프링 시큐리티의 기능은 크게 보면 두가지가 있다.
    1) 웹 시큐리티 (서블릿! web flux X)
        웹 요청에 관해 인증, 권한을 확인해주는 기능
    2) 메소드 시큐리티
        웹과 상관없이 어떤 메소드가 호출 될 때 인증, 권한을 확인해주는 기능

Security Interceptor
    1) 웹 시큐리티 Filter security interceptor
        Security Filter chain: 서블릿 필터를 사용해서 접근과 보안기능 제공
    2) 메소드 시큐리티
      -> AOP, 프록시를 만들어서 접근과 보안기능을 제공

스프링 시큐리티의 동작 흐름(웹)
- 요청이 들어옴
- 요청을 서블릿 필터가 가로채서 스프링 빈에 등록되어 있는 웹 시큐리티 인터셉터로 요청을 보냄
- 인터셉터가 요청에 인증을 해야하는지 판단 (시큐리티 필터를 적용해야하는지)
- 인증을 해야 한다면 웹 시큐리티 인터셉터에 들어옴
- 시큐리티 인터셉터는 인증정보를 확인하여 SecurityContextHolder에서 인증정보를 꺼내려고 시도한다

    * SecurityContextHolder
    : ThreadLocal 구현체(바꿔쓸수잇음)
    : (java)ThreadLocal 한 쓰레드 내에서는 공유하는 자원임
    : 한 쓰레드라면 굳이 메소드에 파라미터에 넘겨주지 않더라도
      쓰레드 로컬에 넣어두고 다른 메소드에서는 쓰레드 로컬에서 데이터를 꺼내쓰면 된다 (마치 DB 처럼)

- 컨텍스트 홀더에 인증정보가 있으면 인증된 사용자가 있다는 얘기!
- AuthenticationManager을 통해서 로그인을 하며 이때 두개의 인터페이스가 사용된다 (userDetailsService, passwordEncoder)
- 인증에는 여러 가지 방법이 가능한데 basic authorization을 사용할 것!

    * basic authorization
    : 인증 요청 헤더에 authentication, basic, username, password 를 함께 인코딩한 정보를 받는다
    : userDetailsService의 기능을 사용해서, 입력받은 유저네임에 해당하는 패스워드를 읽어오고 (DB에서는 어디서든)
    읽어온 패스워드와 사용자가 입력한 패스워드가 일치하는지 passwordEncoder로 검사 한다.
    : 매칭이 되면 authentication 객체를 이용해서 해당 인증정보를 Security Holder에 저장해놓는다.
    요청한 리소스에 접근할 권한이 충분한지에 대한 검사는 AccessDecisionManager를 사용한다 (user의 role로 검사한다)

* 위와 같은 일이 인증과 인가(Authorization, Assertion)가 인터셉터 기준으로 이루어진다.
