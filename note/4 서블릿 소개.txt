4. 서블릿 소개
가장 기본적인 서블릿 애플리케이션 만들기


스프링 웹 MVC 는 서블릿 기반의 웹 애플리케이션을 쉽게 만드는 프레임워크이다.
여기서 말하는 서블릿이란?


서블릿 (Servlet)
    ● 자바 엔터프라이즈 에디션은 웹 애플리케이션 개발용 스팩과 API 제공.
    ● 요청 당 쓰레드 (만들거나, 풀에서 가져다가 ) 사용
    ● 그 중에 가장 중요한 클래스중 하나가 HttpServlet.


서블릿 등장 이전에 사용하던 기술인 CGI (Common Gateway Interface)
    ● 요청 당 프로세스를 만들어 사용


서블릿의 장점 (CGI에 비해)
     ● 빠르다.
     ● 플랫폼 독립적
     ● 보안
     ● 이식성

//
    서블릿의 특징은 한 요청을 처리할때마다 새로운 프로세스를 만들고 죽이는 식으로 동작하는게 아니라(->CGI)
    한 프로세스 내의 자원을 공유하는 쓰레드를 만들어서 요청을 처리한다

    따라서 이전에 사용하던 CGI 인터페이스와 같은 기술에 비해서
    훨씬 빠르고
    자바 기반이기 때문에 OS에 독립적이며
    자바 자체가 가지고 있는 보안, 서블릿 컨테이너가 지원하는 보안과 관련된 기능들의 지원을 받을 수 있기 때문에 훨씬 보안성이 좋고
    이식성도 플랫폼 독립적인 것과 같은 맥락상 이식성이 좋다.
//

서블릿 엔진 또는 서블릿 컨테이너 (톰캣, 제티, 언더토, ...)
     ● 세션 관리
     ● 네트워크 서비스
     ● MIME 기반 메시지 인코딩 디코딩
     ● 서블릿 생명주기 관리
     ● ...

//
    서블릿 엔진(서블릿 컨테이너라고 불리는)이 해주는 일이 많다.
    서블릿 엔진이란 서블릿 스펙을 준수하는 컨테이너들인데
    (톰캣은 서블릿 스펙을 구현한 컨테이너이다)

    서블릿을 어떻게 초기화하고 어떻게 실행하고 어떻게 사용해야 하는지
    스펙에 기반해서 서블릿의 라이프사이클을 관리할 줄 알고 있다.

    세션관리, 네트워크 서비스, 마임기반의 메세지를 인코딩/디코딩 하는 일을 해준다.

    서블릿 애플리케이션은 기본적으로 우리가 직접 실행할 수 없다.
    서블릿 애플리케이션은 반드시 서블릿 컨테이너를 사용해서 실행해야 한다.
//


서블릿 생명주기
    ● 서블릿 컨테이너가 서블릿 인스턴스의 init() 메소드를 호출하여 초기화 한다.
        ○ 최초 요청을 받았을 때 한번 초기화 하고 나면 그 다음 요청부터는 이 과정을 생략한다.
    ● 서블릿이 초기화 된 다음부터 클라이언트의 요청을 처리할 수 있다. 각 요청은 별도의 쓰레드로 처리하고 이때 서블릿 인스턴스의 service() 메소드를 호출한다.
        ○ 이 안에서 HTTP 요청을 받고 클라이언트로 보낼 HTTP 응답을 만든다.
        ○ service()는 보통 HTTP Method에 따라 doGet(), doPost() 등으로 처리를 위임한다.
        ○ 따라서 보통 doGet() 또는 doPost()를 구현한다.
    ● 서블릿 컨테이너 판단에 따라 해당 서블릿을 메모리에서 내려야 할 시점에 destroy()를 호출한다.

//
    서블릿 컨테이너가 서블릿을 실행하는 방법(서블릿 생명주기는 다음과 같다)
    - init 최초 요청을 서블릿 컨테이너가 받았고 이 요청을 처리할 서블릿 클래스를 찾아 이 서블릿의 인스턴스를 만들어 주고 나서 init을 최초로 호출한다
    - http 메소드에 따라서 doGet doPost doDelete 등의 메소드들을 호출
    - init 이 불린 클래스의 또 다른 요청이 들어오면 이 서블릿이 메모리에 올라와 있기 때문에 init 을 호출하지 않고 처리하는 메소드를 실행한다

    초기화 작업이 많은 경우 이 작업에 들어가는 시간을 조금 이나마 줄이고자 (warmup 한다고 한다)
    어플리케이션을 서버에 띄우고 나서 초기 많은 url 들의 요청을 보내서 서블릿이 로딩되게끔 요청을 보내놓음
    어플리케이션을 실행한 뒤 실제 요청을 할때는 init 과정을 생략해서 시간을 줄임

    서블릿 컨테이너의 재량에 따라 서블릿을 메모리에 올려 놓을 필요가 없어질 때
    이 때 반드시 destory() 를 호출하도록 되어 있다.
    (서블릿 컨테이너가 종료될 때 주로 일어남)
//