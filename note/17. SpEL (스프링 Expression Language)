17. SpEL (스프링 Expression Language)

스프링 EL​이란?
    ● 객체 그래프를 조회하고 조작하는 기능을 제공한다.
    ● Unified EL​과 비슷하지만, 메소드 호출을 지원하며, 문자열 템플릿 기능도 제공한다.
    ● OGNL, MVEL, JBOss EL 등 자바에서 사용할 수 있는 여러 EL이 있지만, SpEL은 모든 스프링 프로젝트 전반에 걸쳐 사용할 EL로 만들었다.
    ● 스프링 3.0 부터 지원.

문법
    ● #{“표현식"}
    ● ${“프로퍼티"}
    ● 표현식은 프로퍼티를 가질 수 있지만, 반대는 안 됨.
        ○ #{${my.data} + 1}
    ● 레퍼런스​참고

실제로 어디서 쓰나?
    ● @Value 애노테이션
    ● @ConditionalOnExpression 애노테이션
        // 선택적으로 빈을 등록하거나,
        // 선택적으로 빈 설정파일을 읽어들일 때 사용할 수 있는 어노테이션인데
        // 여기 안에서 SpEL이 사용 가능하다.
    ● 스프링 시큐리티
        ○ 메소드 시큐리티, @PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter
        ○ XML 인터셉터 URL 설정
        ○ ...
    ● 스프링 데이터
        ○ @Query 애노테이션
    ● Thymeleaf
    ● ...

SpEL 구성
    ● ExpressionParser parser = new SpelExpressionParser()
    ● StandardEvaluationContext context = new Standard​EvaluationContext(bean)
    ● Expression expression = parser.parseExpression(“SpEL 표현식”)
    ● String value = expression.getvalue(context, String.class)

[실습]

    @Component -> Sample 빈!
    public class Sample {
        private int data = 200;
        // getter, setter
    }

    @Component
    public class AppRunner implements ApplicationRunner {

        @Value("#{1+1}")
        int value;

        @Value("#{'hello ' + 'world'}")
        String greeting

        @Value("#{1 eq 1}")
        boolean trueOrFalse;

        @Value("hello")
        String hello;

        @Value("${my.value}")
        int myValue;
        // 프로퍼티를 사용해서 값 주입.
        // [application.properties] my.value = 100

        @Value("#{&{my.value} eq 100}")
        boolean isMyValue100;
        // 표현식안에 프로퍼티를 넣어서 사용할 수도 있다.
        // 반대는 불가능

        @Value("#{sample.data}")
        int sampleData;
        // 빈이름.필드명 으로 빈의 데이터 사용 가능

        // application.run 이 실행되면 실행되는 클래스
        @Override
        public void run(...) {
            System.out.println("==================");
            System.out.println(value);
            System.out.println(greeting);
            System.out.println(trueOrFalse);
            System.out.println(hello);
            System.out.println(myValue);
            System.out.println(sampleData);
        }
        // 빈이 만들러질때 Value 라는 어노테이션 안에 사용한 표현식을 SpEL로 파싱해서
        // 그 결과값을 변수에 넣어준다
        // hello String 처럼 그냥 값을 바로 넣어도 괜찮다
        // #: 표현식을 사용해서 값 주입, $: 프로퍼티를 사용해서 값 주입
    }

    ExpressionParser parser = new SpelExpressionParser();
    Expression expression = parser.parseExpression("2+100"); // "2+100" -> expression
    Integer value = expression.getValue(Integer.class);
    // Integer.class 타입으로 가지고 오겠다. String->Integer. 9내부적으로 컨버젼써비스를 사용함
    System.out.println(value);
