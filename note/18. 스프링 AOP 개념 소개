18. 스프링 AOP: 개념 소개

Aspect-oriendted Programming (AOP)은 OOP를 보완하는 수단으로,
흩어진 Aspect를 모듈화 할 수 있는 프로그래밍 기법.

흩어진 관심사 (Crosscutting Concerns)

       classA   classB   classC
        @@@@@    $$$$$    $$$$$
        #####    @@@@@    #####
        $$$$$    @@@@@

AOP를 적용하면?

        AspectX     AspectY     AspectZ
         @@@@@       #####       $$$$$
        --------    --------    --------
         A,B,C       A,B         A,C

AOP 주요 개념
    ● Aspect와 Target
    ● Advice
    ● Join point와 Pointcut

AOP 구현체
    ● https://en.wikipedia.org/wiki/Aspect-oriented_programming
    ● 자바
        ○ AspectJ ○ 스프링 AOP

AOP 적용 방법
    ● 컴파일 ● 로드 타임 ● 런타임

-----------------------------------------------------------------------

스프링 프레임워크를 사용해서
자바에 만들어져있는 AOP 구현체(Aspectj) 와 연동해서 사용하는 기능도 제공하며
스프링 자체에서 구현한 스프링 AOP 의 기능을 사용할 수도 있다.
이 기능을 기반으로 스프링 트랜잭션이나 캐시 등 다른 여러 기능에 적용되고 있다.

AOP란?

    Aspect-oriented Programming (AOP)은 OOP를 보완하는 수단으로,
    흩어진 Aspect를 모듈화 할 수 있는 프로그래밍 기법.
    (OOP와 다른게 아니라 같이 보완해서 쓸 수 있는 개념)


흩어진 관심사 (Crosscutting Concerns)

       classA   classB   classC
        @@@@@    $$$$$    $$$$$
        #####    @@@@@    #####
        $$$$$    @@@@@

    concern: 여러 클래스, 메소드에 거쳐서 나타나는 비슷한 코드
    @@@@@, #####, $$$$$: 컨션

    ex) 트랜잭션
        매 트랜잭션에서는 set auto commit(false) -> run query -> commit or rollback 하는 과정이 있는데
        실제 쿼리를 감싸고 있는 이 반복되는 코드를 컨션이라고 한다.

    ex) 성능 관련된 로깅
        A 클래스의 특정 부분과 C클래스의 특정 부분에 성능상 문제가 있는 것 같다.
        해당 메소드를 실행하는 시간이 얼마나 걸리는지 로깅해보는 기능을 추가하려고 한다.
        이 때 비슷한 코드가 A 와 C에 중복이 될 것. -> 걔가 컨션이다

    컨션들이 있을때 문제점?
        컨션 코드가 변경되는 경우 컨션들이 있는 모든 부분을 찾아가서 고쳐야 함.
        유지보수가 쉽지 않을 것.

    AOP는 이 문제를 Aspect를 이용해서 해결한다
    Aspect로 흩어져 있는 컨션을 하나로 모아서 해결한다.


AOP를 적용하면?

        class A, B, C 에서 컨션들을 제거하고

        AspectX     AspectY     AspectZ
         @@@@@       #####       $$$$$      -> Advise
        --------    --------    --------
         A,B,C       A,B         A,C        -> Taraget

    컨션별로 하나의 Aspect를 만들어 컨션에서 했던 코드와, 이 코드가 적용될 부분을 하나로 모듈화함.

    실제 하던일을 독립적으로 정의하고(->Advise)
    이 일을 어디에 적용해야 하는지(->Pointcut)를 입력한다.
    이 기능(Advise)을 어디 어디 어디에 해야 한다고 알려주는 것


AOP 주요 개념
    ● Aspect와 Target
        Aspect = (Advise+Pointcut) 하나의 모듈
        Advise: 어떤일을 해야 하는지 나타내는 코드
        Pointcut: 어디에 적용해야 하는지 나타내는 코드
        Target: class A,B,C
    ● Advice
    ● Join point와 Pointcut
        Join point: 메소드 실행 시점. 메소드 실행할 때 이 어드바이스를 끼워 넣어라
        끼어들 수 있는 지점. 합류 지점들, 스펙에 가까움
        (생성자 호출 전, 생성자 호출 후, 필드에 가져가기 전 등등)

        Pointcut: A라는 클래스에 B라는 메소드를 실행할 때 얘를 적용해라 하고 알려주는 것.

AOP 구현체
    ● https://en.wikipedia.org/wiki/Aspect-oriented_programming
    ● 자바
        AOP를 구현한 구현체가 많이 있는데 이 중에 자바에서 구현한 AOP 구현체로는 아래가 있다.
        ○ AspectJ
        ○ 스프링 AOP

AOP 적용 방법
    ● 컴파일 시점에
        // 자바 파일을 클래스 파일로 만들 때 AOP를 적용한 바이트파일을 만드는 방법
    ● 로드 타임 시점에
        // A 라는 클래스 파일을 로딩하는 시점에 로딩하는 클래스 정보에 필요한 코드를 끼워 넣음
    ● 런타임 시점에
        // Spring AOP 가 사용하는 방식.
        // A 라는 빈에 Aspect X 를 적용해야 하는 것을 알고 있다면
        // Spring Application 에서 A 라는 타입의 빈을 만들 때 (런타임 시점임)
        // A 라는 빈을 감싼 A 프록시 빈을 만들고 프록시 빈이 실제 A 가 가진 메소드를 실행하기 직전에 들어가야 하는 코드를 끼워넣는다.

    각 방법 마다 가진 장단점이 다르다.