IoC 컨테이너 6부: Environment 1부. 프로파일

프로파일과 프로퍼티를 다루는 인터페이스.

ApplicationContext extends EnvironmentCapable
    ● getEnvironment()

    ApplicationContext 는 BeanFactory 기능 외에도 EnvironmentCapable 인터페이스를 상속받고 있다.
    이 EnvironmentCapable은 크게 2가지 역할을 한다 (1. Profile, 2. Property)

프로파일
    ● 빈들의 그룹
    ● Environment​의 역할은 활성화할 프로파일 확인 및 설정

프로파일 유즈케이스
    ● 테스트 환경에서는 A라는 빈을 사용하고, 배포 환경에서는 B라는 빈을 쓰고 싶다.
    ● 이 빈은 모니터링 용도니까 테스트할 때는 필요가 없고 배포할 때만 등록이 되면 좋겠다.
    -> 이런 이유로 EnvironmentCapable이 Profile의 기능을 사용하면 된다.

프로파일 정의하기
    // 빈들이 어떤 프로파일에 들어가는 빈이라고 설정하지 않았으면
    // 기본 프로파일에 들어가는 빈들이라고 볼 수 있다.

    ● 클래스에 정의 (빈 설정파일, 클래스)
        ○ @Configuration @Profile(“test”)
        // test 프로파일이 아닌 경우, 해당 configuration 에서 정의한 빈은 주입해서 사용할 수 없다.

        ○ @Component @Profile(“test”)
        빈 설정파일을 따로 만들지 않고 프로파일을 만드는 방법?
        Component scan 에 의해 등록되는 빈에도 프로파일 어노테이션을 이용해서 클래스에 정의할 수 있다.

        @Repository @Profiile("test")
        public class TestBookRepository implements BookRepository{
            ...
        }

    ● 메소드에 정의
        ○ @Bean @Profile(“test”)

프로파일 설정하기
    ● -Dspring.profiles.avtive=”test,A,B,...” (edit configuration - active profiles or VM options)
    ● @ActiveProfiles​ (테스트용)

프로파일 표현식
    ● ! (not) ● & (and) ● | (or)
    ex) @Profile("!prod")
    // prod 프로파일이 아닐 때 빈에 등록시킨다.