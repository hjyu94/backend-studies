15. 데이터 바인딩 추상화: PropertyEditor

org.springframework.validation.DataBinder
스프링은 DataBinder 인터페이스를 제공해서 데이터바인딩 기능을 한다.

기술적인 관점: 프로퍼티 값을 타겟 객체에 설정하는 기능
사용자 관점: 사용자 입력값을 애플리케이션 도메인 모델에 동적으로 변환해 넣어주는 기능.

왜 바인딩이 필요하냐?
    해석하자면: 유저의 입력값은 대부분 “문자열”인데,
    그 값을 객체가 가지고 있는 int, long, Boolean, Date 등
    심지어 Event, Book 같은 도메인 타입 그 자체로 변환해서 넣어주는 기능.

PropertyEditor
    ● 스프링 3.0 이전까지 DataBinder가 변환 작업 사용하던 인터페이스
    ● 쓰레드-세이프 하지 않음 (상태 정보 저장 하고 있음, 따라서 싱글톤 빈으로 등록해서 쓰다가는...)
    (유저1이 유저3의 정보를 바꿔버리는 등의 일이 생길 수 있다.)
    ● Object와 String 간의 변환만 할 수 있어, 사용 범위가 제한적 임.
    (그래도 그런 경우가 대부분이기 때문에 잘 사용해 왔음. 조심해서..)
    - 가장 고전적인 방식의 데이터 바인딩

ex)

[문제상황]

    브라우저에서 URL 로 /event/1, /event/2, ... 을 입력했을 때
    입력한 숫자(String)를 이벤트의 id 로 가지는 event 객체로 변환해서
    응답 body 에 id 를 넣어주자.

    "1" -> Event (????)
        : 컨버터가 필요하다

    class Event {
        Integer id;
        String title;
        // Getter, Setter, toString
    }

    @RestController
    class EventController {
        @GetMapping("/event/{event}")
        public String getEvent(@PathVariable Event event) {
            System.out.println(event);
            return event.getId().toString();
        }
    }

    @RunWith(SpringRunner.class)
    @WebMvcTest
    public class EventControllerTest {
        @Autowired
        MockMvc mockMvc;

        @Test
        public void getTest() {
            mockMvc.perform(get("/event/1"))
                .andExpect(status().isOk())
                .andExpect(content().string("1"));
        }
    }

    Run Test! 원하는 결과는
    // 응답이 200으로 아무문제 없어야 하고
    // 1을 (Event.id) 을 응답해줘야한다.

    실패 !
    1(String) 을 Event로 변환하지 못했기 때문에

    <error message>
    Whitelabel Error Page
    This application has no explicit mapping for /error, so you are seeing this as a fallback.

    Wed May 13 14:01:52 KST 2020
    There was an unexpected error (type=Internal Server Error, status=500).
    Failed to convert value of type 'java.lang.String' to required type 'me.hjeong._9_data_binding.PropertyEditor.Event';
    nested exception is java.lang.IllegalStateException:
    Cannot convert value of type 'java.lang.String' to required type 'me.hjeong._9_data_binding.PropertyEditor.Event':
    no matching editors or conversion strategy found

[해결]

    Editor Property로 이 문제를 해결하자!
        PropertyEditorSupport.setValue() 한 뒤
        PropertyEditorSupport.getValue() 에서 객체를 꺼낸다.
        : value 는(여기서는 event 객체) 프로퍼티 에디터가 가지고 있다.

        PropertyEditor는 쓰레드 세이프하지 않기 때문에
        프로퍼티 에디터 구현체들은 여러 쓰레드들에 공유해서 쓰면 안된다.
        즉 빈으로 등록해서 사용하면 안된다.
        1번 회원이 2번 회원의 정보를 수정하는 등의 일이 생겨버린다.

    class EventEditor extends PropertyEditorSupport {
        @Override
        public String getAsText(){
            Event event = (Event) getValue();
            // 프로퍼티 에디터가 받은 객체를 Object 타입으로 가지고 온다
            return event.getId().toString();
        }

        @Override
        public void setAsText(String text){
            setValue(new Event(Integer.parseInt(text)));
            // String 을 Integer 로 변환 후
            // Event 생성자에 넣어준 뒤 setValue() 해준다.
        }
    }

    빈으로 쓰지 못하는데 어떻게 프로퍼티 에디터를 쓰느냐?
    컨트롤러에 @InitBinder를 이용해서 에디터를 등록시켜 쓴다.


    @RestController
    public class EventController {
        @InitBinder
        public void init(WebDataBinder webDataBinder)
        {
            webDataBinder.registerCustomEditor(Event.class, new EventEditor());
            // param 0 : 처리할 데이터의 타입
            // param 1 : PropertyEditor
        }
    }

    컨트롤러가 어떤 요청을 처리하기 전에 init 메소드가 호출되고
    컨트롤러에서 정의한 데이터 바인더에 들어있는 프로피터 에디터를 사용

    문자열 1을 이벤트 객체로 변경한 후 사용해서
    테스트가 아무 문제 없이 사용되는 것을 볼수잇다

    구현 자체도 편리하지 않고,
    쓰레드 세이프하지 않기 때문에
    스프링 3부터는 다른 데이터 바인딩과 관련된 인터페이스들이 추가되었다.
    -> Converter, Formatter 의 출현!