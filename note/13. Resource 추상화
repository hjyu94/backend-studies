13. Resource 추상화

org.springframework.core.io.Resource

특징
    ● java.net.URL을 추상화 한 것.
    ● 스프링 내부에서 많이 사용하는 인터페이스.

추상화 한 이유
    ● 클래스패스 기준으로 리소스 읽어오는 기능이 없음
    ● ServletContext를 기준으로 상대 경로로 읽어오는 기능이 없음
    ● 새로운 핸들러를 등록하여 특별한 URL 접미사를 만들어 사용할 수는 있지만 구현이 복잡하고 편의성 메소드가 부족하다.

인터페이스 둘러보기
    ● 상속 받은 인터페이스
    ● 주요 메소드
        ○ getInputStream()
        ○ exist() // 항상 존재하는지 장담할 수 없기 때문에
        ○ isOpen()
        ○ getDescription(): 전체 경로 포함한 파일 이름 또는 실제 URL
        // 읽을 수 있는지, 열려 있는지, 파일인지 디렉토리인지, ...

구현체
    ● UrlResource: ​java.net.URL​ 참고, 기본으로 지원하는 프로토콜 http, https, ftp, file, jar.
    ● ClassPathResource: 지원하는 접두어 classpath: (target/classes 를 루트 디렉토리로 찾는다)
    ● FileSystemResource
    ● ServletContextResource: 웹 애플리케이션 루트에서 상대 경로로 리소스 찾는다.
    ● ...

리소스 읽어오기
    ● Resource의 타입은 locaion 문자열과 ApplicationContext의 타입에 따라 결정 된다.
        ○ ClassPathXmlApplicationContext -> ClassPathResource
        ○ FileSystemXmlApplicationContext -> FileSystemResource
        ○ WebApplicationContext -> ServletContextResource

    ● ApplicationContext의 의 타입에 타입에 상관없이 상관없이 리소스 리소스 타입을 타입을 강제하려면 강제하려면 java.net.URL 접두어 접두어 중 중 하나를 하나를 사용할 사용할 수있다.
        ○ classpath:me/whiteship/config.xml -> ClassPathResource
        ○ file:///some/resource/path/config.xml -> FileSystemResource

[실습]

    java.net.URL을 추상화 한 것.
    (springframework.core.io.Resource로 감싸서 로우 레벨의 리소스에 접근하도록 바꾼 것)

    var ctx = new ClassPathXmlApplicationContext("name.xml");
    // 이런식으로 ApplicationContext 를 가지고 오는데 이 때 name.xml이 리소스로 변환된다.
    // 내부적으로 resourceLoader.getResource("name.xml") 이 호출되어 리소스를 얻어온다는 뜻
    // AC가 ClassPathXmlAC 이므로 클래스 패쓰 기준으로 설정파일을 찾음

    new FileSystemXmlApplicationContext("xxx.xml");
    // AC가 FileSystemXmlAC 이므로 파일 시스템 기준으로 xxx.xml 설정파일을 찾아오는 것

    @Component
    public class AppRunner implements ApplicationRunner {
        @Autowired
        ApplicationContext resourceLoader;

        @Override
        public void run(...) {
            System.out.println(resourceLoader.getClass());
            // ... WebServerApplicationContext

            Resource rsc = resourceLoader.getResource("classpath:text.txt");
            System.out.println(rsc.getClass());
            // ClassPathResource

            rsc = resourceLoader.getResource("text.txt");
            System.out.println(rsc.getClass());
            // ServletContextResource
        }
    }

    EX//
    <bean id="myBean" class="...">
        <property name="template" value="some/resource/path/myTemplate.txt"/>
    </bean>

    myBean은 프로퍼티 템플릿 값이 myTemplate.txt 이다
    저 경로는 해당 빈 설정파일을 읽어들이는 ApplicationContext 데이터 타입에 따라 경로가 달라진다.


