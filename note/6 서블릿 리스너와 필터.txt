6. 서블릿 리스너와 필터

서블릿 리스너
    ● 웹 애플리케이션에서 발생하는 주요 이벤트를 감지하고
    각 이벤트에 특별한 작업이 필요한 경우에 사용할 수 있다.

        ○ 서블릿 컨텍스트 수준의 이벤트
            ■ 컨텍스트 라이프사이클 이벤트 (컨텍스트가 만들어지고, 지워지는 등의 이벤트)
            ■ 컨텍스트 애트리뷰트 변경 이벤트

        ○ 세션 수준의 이벤트
            ■ 세션 라이프사이클 이벤트
            ■ 세션 애트리뷰트 변경 이벤트


서블릿 필터
    ● 들어온 요청을 서블릿으로 보내고, 또 서블릿이 작성한 응답을 클라이언트로 보내기 전에 특별한 처리가 필요한 경우에 사용할 수 있다.
    ● 체인 형태의 구조

    doGet() 요청이 서블릿으로 가기 전에 전처리 기능을 하고 싶은 경우 필터를 사용한다.
    여러개의 서블릿에 추가적인 작업을 할 수 있고, 특정 url 에 추가적인 작업을 할 수 있다.

    필터는 동시다발적으로 실행되는게 아니라 체인 형태의 구조인데
    web.xml 에 정의된 순서대로 실행되며
    반드시 이 다음 체인으로 전달되도록 작성해야 서블릿까지 도달한다.

    필터에서 실제 서블릿까지 가기 전에 걸러내는 필터라면
    다음 체인으로 응답을 보내지 않고 (서블릿으로 도착하지 못하고)
    바로 서블릿 컨테이너로 응답을 보내기도 한다.

    (서블릿으로 도착하거나, 서블릿 컨테이너로 돌아가야 한다)

                      |-----(request)---->|
    Servlet Container | FilterA | FilterB | Servlet
                      |<----(response)----|


참고
7    ● https://docs.oracle.com/cd/B14099_19/web.1012/b14017/filters.htm#i1000654


[1] 서블릿 리스너 ex

    서블릿 컨테이너가 구동될 때 데이터베이스 커넥션을 맺어놓으면
    데이터베이스 커넥션을 서블릿 애플리케이션에 제공할 수 있다.

    서블릿 애플리케이션은
    서블릿 컨텍스트라는 곳에 들어있는 서블릿 애트리뷰트들에 들어있는 데이터베이스 커넥션을 꺼내 사용할 수 있다.
    서블릿 컨테이너가 종료되는 시점에 서블릿 컨텍스트 리스너를 활용해서 db 커넥션을 정리하는 일등을 할 수 있다.


    서블릿 컨텍스트가 만들어지면 attribute [name=hjeong] 값을 넣어주도록 해보자.
    이 후 서블릿에서는 서블릿 컨텍스트 안의 attribute를 가져다가 사용 할 수 있다.

    서블릿 컨텍스트 수준의 컨텍스트 라이프사이클 이벤트를 감지하는 리스너(ServletContextListener) 생성
    public class MyListener implements ServletContextListener {
        @Override
        public void contextInitialized(ServletContextEvent sce){
            println("Context Initialized");
            sce.getServletContext().setAttribute("name", "keesun");
        }

        @Override
        public void contextDestroyed(ServletContextEvent sce){
            println("Context Destroyed");
        }
    }

    web.xml에 리스너 등록하기
        <web-app>
          <display-name>Archetype Created Web Application</display-name>

          <listener>
            <listener-class>me.hjeong.MyListener</listener-class>
          </listener>

          <servlet>
            <servlet-name>hello</servlet-name>
            <servlet-class>me.hjeong.HelloServlet</servlet-class>
          </servlet>

          <servlet-mapping>
            <servlet-name>hello</servlet-name>
            <url-pattern>/hello</url-pattern>
          </servlet-mapping>
        </web-app>


    리스너들은 여러개의 서블릿이 공통적으로 사용하는 객체들을 넣어두는 용도로 사용 가능.
    (sce.getServletContext().setAttribute("name", "keesun"); 처럼)

    리스너들은 서블릿 컨테이너 위에(on) 있는 개념
    리스너들이 서블릿 컨테이너 변경을 감지할 수 있도록 서블릿 컨테이너에 등록이 되는 개념.
    필터는 서블릿 컨테이너가 어떤 요청을 받으면 서블릿으로 가기 전에 필터를 거쳐서 가는 개념.

    리스너가 넣어준 값을 꺼내서 서블릿에서 사용해보자
    class HelloServlet extends HttpServlet {
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            resp.getWriter().println("<h1>Hello " + getName() + "</h1>");
        }

        private Object getName() {
            return getServletContext().getAttribute("name");
        }
    }


[2] 서블릿 필터 ex

    필터 사용해보기
        import javax.servlet.*;

        class MyFilter implements Filter {
            @Override
            public void init(FilterConfig filterConfig) {
                println("Filter Init");
            }
            @Override
            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
                                throws IOException, ServletException {
                println("Filter");
                chain.doFilter(request, response);
                // 반드시 다음 필터로 연결해줘야 한다.
                // 맨 마지막 필터였다면 서블릿으로 연결시켜준다
                // 서블릿에서 필요한 매개변수 req, resp 가 전달된다.
                (HelloServlet::doGet(HttpServletRequest req, HttpServletResponse resp))
            }
            @Override
            public void destory(){
                println("Filter Destroy");
            }
        }

    web.xml에 필터 등록
        <web-app>
            <filter>
                <filter-name>myFilter</>
                <filiter-class>me.hjeong.MyFilter</>
            </>
            <filter-mapping>
                <filter-name>myFilter</>
                <servlet-mapping>hello</>
            </>
        </>

The content of element type "web-app" must match
"(icon?,display-name?,description?,distributable?,context-param*,filter*,filter-mapping*,listener*,servlet*,servlet-mapping*,session-config?,mime-mapping*,welcome-file-list?,error-page*,taglib*,resource-env-ref*,resource-ref*,security-constraint*,login-config?,security-role*,env-entry*,ejb-ref*,ejb-local-ref*)".
-> 요소들 순서 맞춰주기

    <web-app>
      <display-name>Archetype Created Web Application</display-name>

      <filter>
        <filter-name>myFilter</filter-name>
        <filter-class>me.hjeong.MyFilter</filter-class>
      </filter>
      <filter-mapping>
        <filter-name>myFilter</filter-name>
        <servlet-name>hello</servlet-name>
      </filter-mapping>

      <listener>
        <listener-class>me.hjeong.MyListener</listener-class>
      </listener>

      <servlet>
        <servlet-name>hello</servlet-name>
        <servlet-class>me.hjeong.HelloServlet</servlet-class>
      </servlet>
      <servlet-mapping>
        <servlet-name>hello</servlet-name>
        <url-pattern>/hello</url-pattern>
      </servlet-mapping>
    </web-app>


Run!

    "C:\Program Files\apache-tomcat-9.0.34\bin\catalina.bat" run
    ...
    Connected to server
    ...
    Context initialized
    ...
    Filter Init
    ...
    init
    doFilter
    doGet
    doFilter
    doGet
    doFilter
    doGet
    doFilter
    doGet
    doFilter
    doGet
    "C:\Program Files\apache-tomcat-9.0.34\bin\catalina.bat" stop
    ...
    destroy
    Filter destroyed
    Context Destroyed
    ...
    Disconnected from server
