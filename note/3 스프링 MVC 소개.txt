3. 스프링 MVC 소개

스프링 MVC로 웹 애플리케이션 개발하기 소개

M: 모델
V: 뷰
C: 컨트롤러

모델: 평범한 자바 객체 POJO
뷰: HTML. JSP,
타임리프 , ...
컨트롤러: 스프링 @MVC


모델: 도메인 객체 또는 DTO로 화면에 전달할 또는 화면에서 전달 받은 데이터를 담고 있는 객체.
뷰: 데이터를 보여주는 역할. 다양한 형태로 보여줄 수 있다. HTML, JSON, XML, ...
컨트롤러: 사용자 입력을 받아 모델 객체의 데이터를 변경하거나, 모델 객체를 뷰에 전달하는 역할.
 - 입력값을 검증해주거나
 - 입력 받은 데이터로 모델 객체 변경하거나
 - 변경된 모델 객체를 뷰에 전달하는 역할을 한다.


MVC 패턴의 장점
 ● 동시 다발적(Simultaneous) 개발 - 백엔드 개발자와 프론트엔드 개발자가 독립적으로 개발을 진행할 수 있다.
 ● 높은 결합도 - 논리적으로 관련있는 기능을 하나의 컨트롤러로 묶거나, 특정 모델과 관련있는 뷰를 그룹화 할 수 있다.
 ● 낮은 의존도 - 뷰, 모델, 컨트롤러는 각각 독립적이다.
 ● 개발 용이성 - 책임이 구분되어 있어 코드 수정하는 것이 편하다.
 ● 한 모델에 대한 여러 형태의 뷰를 가질 수 있다.


MVC 패턴의 단점
 ● 코드 네비게이션 복잡함 // 요청이 처리되는 과정을 보려면 m, v, c 를 전부 봐야 함.
 ● 코드 일관성 유지에 노력이 필요함 // 코드가 아무래도 여러곳에 분산되어있다 보니까
 ● 높은 학습 곡선


참고
 ● https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
 ● https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html

[실습]
    GET /events 요청이 들어오면 Event 모델을 뷰에 실어서 응답으로 보내는 컨트롤러를 만들어보자

    New Spring Boot Module
    Group: me.hjeong
    Artifact: 1_springmvc
    Type: Maven Project
    Java Version: 8
    Next

    Dependency
    Spring Web, Lombok, Thymeleaf 의존성 추가

    Event Controller 추가하기
    @Controller
    public class EventController {

        // 웹 브라우저에서 /events 로 GET 요청이 들어오면 이벤트 목록을 보여주자
        @RequestMapping(value = "/events", method = RequestMethod.GET)

        // 모델이라는 구조에다가 (자바의 맵 과 비슷) 화면에 보여줄 데이터를 담으면 된다.
        public String events(Model model) {
            화면에 전달할 모델 객체를 담는 것 키 밸류형식으로 담는다.
            우선 return "events";
        }
    }

    GET /events 요청이 들어오면 처리할 핸들러
    @RequestMapping(value = "/events", method = RequestMethod.GET)를 간추려서
    @GetMapping("/events") 라고도 쓸 수 있다.


모델: 전달하고자 하는 애플리케이션에서 다루는 평범한 POJO 객체
    Event 클래스 생성

    @Getter @Setter
    @Builder @NoArgsConstructor @AllArgsConstructor
    // 롬복 애노테이션을 사용하면 컴파일 시점에서 자동으로 필요한 코드를 생성해줌
    // 메이븐-Compile, target/classes/me/hjeong/_1_springmvc/Event.class 확인하면 만들어진 코드를 확인할 수 있다.
    public class Event {
        private String name;
        private int limitOfEnrollment;
        private LocalDateTime startDateTime;
        private LocalDateTime endDataTime;
    }

모델을 컨트롤러에 제공할 때 컨트롤러 안에서 바로 코드를 써도 되지만
써비스라는 클래스를 만들어서 제공해보자.

    @Service
    public class EventService {
        public List<Event> getEvents() {
            Event event1 = Event.builder()
                .name("스프링 웹 MVC 스터디 1차")
                .limitOfEnrollment(5)
                .startDateTime(LocalDateTime.of(2019, 1, 10, 10, 0))
                .endDateTime(LocalDateTime.of(2019, 1, 10, 12, 0))
                .build();

            Event event2 = Event.builder()
                .name("스프링 웹 MVC 스터디 2차")
                .limitOfEnrollment(5)
                .startDateTime(LocalDateTime.of(2019, 1, 17, 10, 0))
                .endDateTime(LocalDateTime.of(2019, 1, 17, 12, 0))
                .build();

            return List.of(event1, event2);
        }
    }

    @Controller
    public class EventController {
        // EventService, EventController 모두 빈이므로
        // 컨트롤러 안에서 서비스를 주입받아 사용할 수 있다.
        @Autowired
        EventService eventService;

        @GetMapping("/events")
        public String events(model model){
            model.addAttribute("events", eventService.getEvents());
            // 받아온 값(이벤트)을 모델에 담아주자.
            return "events";
            // 리턴하는 문자열? 뷰의 이름!
            // 현재는 Cannot resolve MVC View 'events' 에러가 표시된다.
        }
    }

리턴하는 문자열? 컨트롤러가 사용할 뷰에 대한 힌트 제공
스프링부트 사용시 뷰를 찾는 루트는 resources/templetes 라는 곳에서 events 라는 이름으로 찾는다.

    resources/templetes/events.html
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
    타임리프트를 쓰기 위해 네임스페이스 추가
    th 라는 네임스페이스를 정의하겠다. ...org 에 th 라는 네임스페이스에 대해 정의해 놓았다.
        <head>
        </head>
        <body>
            <h1>이벤트 목록</h1>
            <table>
                <tr>
                    <th>이름</th>
                    <th>참가 인원</th>
                    <th>시작</th>
                    <th>종료</th>
                </tr>
                <tr th:each="event: ${events}">
                    <td th:text="${event.name}">이벤트 이름</td>
                    <td th:text="${event.limitOfEnrollment}">100</td>
                    <td th:text="${event.startDateTime}">2020년 1월 10일 오전 10시</td>
                    <td th:text="${event.endDateTime}">2020년 1월 10일 오전 12시</td>
                </tr>
            </table>
        </body>
    </html>

Run!
    http://localhost:8080/events


참고
    https://asfirstalways.tistory.com/334