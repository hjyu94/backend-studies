22. 핸들러 인터셉터 1부: 개념

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servl et/config/annotation/WebMvcConfigurer.html#addInterceptors-org.springframework.web.servlet. config.annotation.InterceptorRegistry-


HandlerInterceptor
    ● 핸들러 맵핑에 설정할 수 있는 인터셉터
    (핸들러 매핑? 요청을 처리할 핸들러를 찾아주는 역할을 한다)

    ● 핸들러 인터셉터를 핸들러 매핑에 설정해두면
    그 핸들러 매핑이 찾아주는 핸들러에 인터셉터들을 적용해준다.

    ● 핸들러를 실행하기 전, 후(아직 랜더링 전) 그리고 완료(랜더링까지 끝난 이후) 시점에
      부가 작업을 하고 싶은 경우에 사용할 수 있다.

    ● 여러 핸들러에서 반복적으로 사용하는 코드를 줄이고 싶을 때 사용할 수 있다.
        ○ 로깅, 인증 체크, Locale 변경 등...

    이전 예제에서 /hello 요청을 처리하는 public String hello() 핸들러에
    /hello 요청을 처리하기 전후에 부가작업을 할 수 있다.

    [처리 순서]
    preHandle
    -> 요청 처리(핸들러 호출)
    -> postHandler
    -> 뷰 렌더링
    -> afterCompletion

    pre, post, after 세번의 전후처리를 할 수 있다.


[1] boolean preHandle(request, response, handler)
    ● 핸들러 실행하기 전에 호출 됨
    ● “핸들러"에 대한 정보를 사용할 수 있기 때문에 서블릿 필터에 비해 보다 세밀한 로직을 구현할 수 있다.
    ● 리턴값으로 계속 다음 인터셉터 또는 핸들러로 요청,응답을 전달할지(true) 응답 처리가 이곳에서 끝났는지(false) 알린다.

    일반적인 서블릿 필터로 서블릿 요청이 처리되기 전에 부가작업을 하는 것과 비슷한데
    preHandle 에서는 핸들러 인터셉터에게 handler 가 파라매터로 제공되기 때문에 좀 더 구체적인 일을 할 수 있다.

    return 값이 true이면 이 다음 인터셉터, 핸들러에게 쭉 요청을 전달
    false이면 여기서 응답처리를 끝냈다. 다음 인터셉터나 핸들러에게 전달되지 말고 요청을 끝내라.


[2] void postHandle(request, response, modelAndView)
    ● 핸들러 실행이 끝나고 뷰를 랜더링 하기 직전에 호출 됨
    ● “뷰"에 전달할 추가적이거나 여러 핸들러에 공통적인 모델 정보를 담는데 사용할 수도 있다.
    ● 이 메소드는 인터셉터 역순으로 호출된다.
    ● 비동기적인 요청 처리 시에는 호출되지 않는다.

    뷰를 렌더링하기 직전이기 때문에 modelAndView를 제공한다.
    여기서 파라매터로 받은 modelAndView를 수정할 수 있다.
    핸들러 인터셉터가 여러개라고 했을 때 호출 순서는 아래와 같다.

    preHandle 1
    preHandle 2
    요청 처리(핸들러 호출)
    postHandle 2
    postHandle 1
    뷰 렌더링
    afterCompletion 2
    afterCompletion 1

    postHandle, afterCompletion는 역순으로 호출된다.
    (order로 순서를 줄수도 있다)


[3] void afterCompletion(request, response, handler, ex) // ex: 예외
    ● 요청 처리가 완전히 끝난 뒤(뷰 랜더링 끝난 뒤)에 호출 됨
    ● preHandler에서 true를 리턴한 경우에만 호출 됨
    ● 이 메소드는 인터셉터 역순으로 호출된다.
    ● 비동기적인 요청 처리 시에는 호출되지 않는다.



핸들러 인터셉터 vs 서블릿 필터
    ● 서블릿 보다 구체적인 처리가 가능하다.
    ● 서블릿은 보다 일반적인 용도의 기능을 구현하는데 사용하는게 좋다.
    스프링 mvc에 특화되어있는 로직을 참고해야 한다면 핸들러 인터셉터로 구현하는게 좋다.

    서블릿 필터도 특정 서블릿이 호출되기 전 후에 할 수 있는 콜백등을 제공한다
    차이점은 핸들러 인터셉터 템플릿이 훨씬 구체적(handler, modelAndView 등이 제공됨)

    ex) XSS attack 를 방어하는 경우는 서블릿 필터로 구현하는게 맞다. (mvc 관련 내용이 아니니까)



참고:
    ● https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/w eb/servlet/HandlerInterceptor.html
    ● https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/w eb/servlet/AsyncHandlerInterceptor.html
    ● http://forum.spring.io/forum/spring-projects/web/20146-what-is-the-difference-between-u sing-a-filter-and-interceptor
    (스프링 개발자 Mark Fisher의 서블릿 필터와의 차이점에 대한 답변 참고)
