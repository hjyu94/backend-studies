29. 스프링 MVC 설정 마무리


[1] 스프링 MVC 설정은 즉 DispatcherServlet이 사용할 여러 빈 설정.
    - HandlerMapper
    - HandlerAdapter
    - ViewResolver
    - ExceptionResolver
    - LocaleResolver
    - ...
    //
        빈으로 직접 등록하면 DispatcherServlet이 ApplicationContext에 등록된 빈을 알아서 가져다 쓸 것.
        없더라도 기본 전략이 있긴 하지만 (dispatcher.properties 를 참조해서) 우리가 빈을 만들어주면 걔를 만든다!

        일일히 등록하려니 너무 많고, 해당 빈들이 참조하는 또 다른 객체들까지 설정하려면... 설정할게 너무 많다.
    //


[2] @EnableWebMvc
    - 애노테이션 기반의 스프링 MVC 설정 간편화
    - WebMvcConfigurer가 제공하는 메소드를 구현하여 커스터마이징할 수 있다.
    //
        경우에 따라 @EnableWebMvc이 제공하는 빈을 커스터마이징 하여 사용하고 싶은데
        DispatcherServlet이 사용하는 모든 빈을 처음부터 다시 재정의하는게 아니라

        어떤 Configuration이 WebMvcConfigurer 인터페이스를 구현하고 있다면
        EnableWebMvc가 제공하는 deligate 설정 메커니즘에 따라
        EnableWebMvc이 제공하는 빈을 그대로 두고 커스터마이징하여 쓸 수 있다.
    //


[3] 스프링 부트
    - 스프링 부트 자동 설정을 통해 다양한 스프링 MVC 기능을 아무런 설정 파일을 만들지 않아도 제공한다.
    - [2]와 마찬가지로 WebMvcConfigurer가 제공하는 메소드를 구현하여 커스터마이징할 수 있다.
    - 허나 @EnableWebMvc를 사용하면 스프링 부트 자동 설정을 사용하지 못한다. <*주의*>


스프링 MVC 설정 방법
    - 스프링 부트를 사용하는 경우에는 application.properties 부터 시작.
    (이 방법부터 생각해봐야 한다)

    - WebMvcConfigurer로 시작
    (이 방법으로도 내가 원하는 커스터마이징을 할 수 없다면)

    - @Bean으로 MVC 구성 요소 직접 등록
