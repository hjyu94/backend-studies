3 EventControllerTests 생성

JUnit4 사용

@RunWith(SpringRunner.class)
@WebMvcTest
public class EventControllerTests { ... }

@WebMvcTest:
    웹과 관련된 빈들이 등록이 됨 -> MockMvc 주입 가능
    MockMvc를 이용해서 가짜 요청을 만들어서 DispatcherServlet 에게 보낼 수 있음, 응답을 확인할 수 있음.
    웹과 관련된 빈들만 가지고 테스트 하기 때문에 슬라이싱 테스트라고 한다.
    웹서버를 띄우지 않기 때문에 좀 더 빠르지만, DispatcherServlet 등의 객체를 만들어야 하기 때문에 단위 테스트보다는 시간이 조금 더 걸림


EventControllerTests
    @Test
    public void createEvent() throws Exception {

        mockMvc.perform(post("/api/events/")
                    .contentType(MediaType.APPLICATION_JSON_VALUE) // 응답 요청은 json으로 생겼다.
                    .accept(MediaTypes.HAL_JSON_VALUE) // HAL, HATEOAS
                )
                .andDo(print())
                .andExpect(status().isCreated())
                .andExpect(status().is(201))
        ;
    }

contentType 요청 본문에 담긴 데이터 타입을 알려주는 헤더
accept 응답 본문으로 원하는 데이터 타입을 알려주는 헤더

* 단축키
    Alt 1: 프로젝트 창 보기
    Ctrl Shift F10 테스트 런

print(): 로그로 응답 확인

