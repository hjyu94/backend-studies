13 스프링 HATEOAS

>> 소개
HATEOAS란?
    Hypermedia as the Engine of Application State
    HATEOAS is a component of the REST application architecture that distinguishes it from other network application architectures.
    With HATEOAS, a client interacts with a network application whose application servers provide information dynamically through hypermedia.
    A REST client needs little to no prior knowledge about how to interact with an application or server beyond a generic understanding of hypermedia.
    By contrast, clients and servers in CORBA interact through a fixed interface shared through documentation or an interface description language (IDL).
    The restrictions imposed by HATEOAS decouple client and server.
    This enables server functionality to evolve independently.

    하이퍼미디어를 사욯해서 애플리케이션 서버의 정보를 클라이언트와 동적으로 정보를 주고받음.

    예시
        [요청]
            get /accounts/12345 요청을 보낼 때
        [응답]
            계좌번호 정보
            남은 금액 (usd달러로 100달러)
            링크
                - 추가로 돈 입금하기
                - 인출하기
                - 다른 계좌로 송금하기
                - 계좌 닫기
            // 릴레이션으로 어떠한 액션을 할 수 있는지가 나와있음.
            // 각각에 해당하는 링크 정보가 하이퍼미디어 레퍼런스러 URI이 됨
            // 서버가 relation만 보고 동작한다면 해당 URI 가 바뀌더라도 기능이 정상적으로 작동

        [요청]
            동일함
        [응답]
            남은 금액이 - 임!
            추가로 돈 입금하는 링크만 존재

    즉 애플리케이션의 상태 변화에 따라 링크정보가 바껴야 한다. -> HATEOAS
    이러한 HATEOAS를 만족시켜야 진정한 Restful API 가 된다.


스프링 HATEOAS
    ● This project provides some APIs to ease creating REST representations that follow the HATEOAS principle
      when working with Spring and especially Spring MVC.
      The core problem it tries to address is link creation and representation assembly.
    ● https://docs.spring.io/spring-hateoas/docs/current/reference/html/

    스프링 프로젝트 중 하나로써
    HATEOAS를 만족하는 Representation을 만족하는 API를 만들 때 사용할 수 있는 라이브러리
    링크와 리소스를 보다 쉽게 사용할 수 있도록 여러 기능을 제공한다.


가장 중요한 기능
    ● 링크 만드는 기능
        ○ 문자열 가지고 만들기
        ○ 컨트롤러와 메소드로 만들기
    ● 리소스 만드는 기능
        ○ 리소스: 데이터 + 링크

클라이언트 입장에서는 링크를 보다 쉽게 찾아올 수 있도록 기능 제공
    ● 링크 찾아주는 기능
        ○ Traverson
        ○ LinkDiscoverers
    ● 링크 ​
        ○ HREF
        ○ REL ​
            ■ self
            ■ profile
            ■ update-event
            ■ query-events



>> 스프링 HATEOAS 적용
EvnetResource 만들기
    ● extends ResourceSupport의 문제
        ○ @JsonUnwrapped로 해결
        ○ extends Resource<T>로 해결

테스트 할 것
    ● 응답에 HATEOA와 profile 관련 링크가 있는지 확인.
        ○ self (view)  ○ update (만든 사람은 수정할 수 있으니까)  ○ events (목록으로 가는 링크)

참고
    ● https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/



[실습]
    응답이 잘 작성된 경우 응답에서 링크 정보를 받을 수 있어야 한다.

Test
    post("/api/events")

    .andExpect(jsonPath("_links.self").exists())
    // .andExpect(jsonPath("_links.profile").exists()) // 추후 추가
    .andExpect(jsonPath("_links.query-events").exists())
    .andExpect(jsonPath("_links.update-events").exists())

    테스트 할 것!
    ● 응답에 HATEOAS와 profile 관련 링크가 있는지 확인.
        ○ self (view)
        ○ update (만든 사람은 수정할 수 있으니까)
        ○ events (목록으로 가는 링크)


* 현재 상테는 아무런 링크가 없기 때문에 그 어떤 상태로도 전이가 불가능한 상태임
    {
        "name":"Spring",
        "description":"REST API Development with Spring",
        "beginEnrollmentDateTime":"2018-09-01T00:00:00",
        "closeEnrollmentDateTime":"2018-10-31T00:00:00",
        "beginEventDateTime":"2018-11-23T14:00:00",
        "endEventDateTime":"2018-11-24T14:00:00",
        "location":"강남역 D2 스타텁 팩토리",
        "basePrice":0,
        "maxPrice":0,
        "limitOfEnrollment":100
    }

EventResource 만들기
    <참고> hateoas가 1.0.2 가 되면서 바뀐부분이 있네요..
    ResourceSupport is now RepresentationModel
    Resource is now EntityModel
    Resources is now CollectionModel
    PagedResources is now PagedModel
    위와같이 변경되었고, 12분쯤에 나오는 Resource<Event> 초기화되는 부분이 없어진거 같습니다.
    혹시 뒤늦게 보시는 분들 hateos 버전을 맞추던가, 아래 사이트 참고하세요.

    https://docs.spring.io/spring-hateoas/docs/1.0.1.RELEASE/reference/html/
    ● extends ResourceSupport
    ● ResourceSupport 문제 (Event 객체가 컴포짓해서 내부에 그룹이 하나 더 생긴다)
        ○ @JsonUnwrapped로 해결
        ○ extends Resource<T>로 해결

    class EventResource extends ResourceSupport {
        private Event event;
        // constructor, getter
    }


Controller
    이벤트 -> 이벤트 리소스 변환
    이벤트 리소스에 링크 추가하기

    public ResponseEntity createEvent(...) {
        // ...

        LinkBuilder selfLinkBuilder = linkTo(EventController.class).slash(newEvent.getId());
        System.out.println(selfLinkBuilder.getClass());
        URI createdUri = selfLinkBuilder.toUri();

        EventResource eventResource = new EventResource(event);
        eventResource.add(linkTo(EventController.class).withRel("query-events"));
        eventResource.add(selfLinkBuilder.withSelfRel()); // get
        eventResource.add(selfLinkBuilder.withRel("update-event")); // put

        return ResponseEntity.created(createdUri).body(eventResource);
    }

* 테스트
    {
        "event":{
            "id":1,
            "name":"Spring",
            "description":"REST API Development with Spring",
            "beginEnrollmentDateTime":"2018-09-01T00:00:00",
            "closeEnrollmentDateTime":"2018-10-31T00:00:00",
            "beginEventDateTime":"2018-11-23T14:00:00",
            "endEventDateTime":"2018-11-24T14:00:00",
            "location":"ê°ë¨ì­ D2 ì¤íí í©í ë¦¬",
            "basePrice":0,
            "maxPrice":0,
            "limitOfEnrollment":100,
            "offline":false,
            "free":true,
            "eventStatus":"DRAFT"
        },
        "_links":{
            "query-events":{
                "href":"http://localhost/api/events"
            },
            "self":{
                "href":"http://localhost/api/events/1"
            },
            "update-event":{
                "href":"http://localhost/api/events/1"
            }
        }
    }

    body에 실리는 eventResource를 objectMapper가(object, json 컨버터)
    Serializer하는데 (->json 변환) 이 때 BeanSerializer를 사용한다.
    기본적으로 필드 이름을 사용해서 json을 추가하는데
    이 때 event 필드가 컴포짓 객체이므로 이 이름 안에 그룹으로 Event의 필드를 추가. -> 문제


EventResource의 문제
    [1]
        컴포짓 객체를 필드로 사용하지 말고 Event 안의 필드를 모두 복붙해와서
        생성자에서 event.getXXX() 로 필드를 채워주면 됨

        public class EventResource extends RepresentationModel {
            private Integer id;
            private String name;
            // ...

            public EventResource(Event event) {
                this.name = event.getName();
                // ...
            }
        }
    [2]
        @JsonUnwrapped
        private Event event;
    [3]
        public class EventResource extends EntityModel<Event> {
            public EventResource(Event content, Link... links) {
                super(content, links);
            }
        }
        EntityModel를 사용하면 필드에 content 타입이 들어가는데
        이 때 내부적으로 content 필드에 @JsonUnwrapped가 들어감


* 테스트 성공!
    {
        "id":1,
        "name":"Spring",
        "description":"REST API Development with Spring",
        "beginEnrollmentDateTime":"2018-09-01T00:00:00",
        "closeEnrollmentDateTime":"2018-10-31T00:00:00",
        "beginEventDateTime":"2018-11-23T14:00:00",
        "endEventDateTime":"2018-11-24T14:00:00",
        "location":"ê°ë¨ì­ D2 ì¤íí í©í ë¦¬",
        "basePrice":0,
        "maxPrice":0,
        "limitOfEnrollment":100,
        "offline":false,
        "free":true,
        "eventStatus":"DRAFT",
        "_links":{
            "query-events":{
                "href":"http://localhost/api/events"
            },
            "self":{
                "href":"http://localhost/api/events/1"
            },
            "update-event":{
                "href":"http://localhost/api/events/1"
            }
        }
    }

* 응답헤더
    Content type = application/hal+json: link 정보가 응답에 들어있음을 예상 가능

* 리소스는 빈으로 등록하는게 아니라 매번 새로운 객체를 생성해서 사용
    return ResponseEntity...body(eventResource);

리팩토링
    - 셀프링크는 컨트롤러에서 추가하지 않음
    EventResource 생성자에서
    add(linkTo(EventController.class).slash(content.getId()).withSelfRel());
    // add(new Link("http://localhost:8080/api/events/" + event.getId()) 와 같은 것


* 스프링 부트가 HATEOAS에 대한 자동 설정을 모두 해놓았기 때문에 우리가 따로 설정할 필요 없이 편하게 사용 가능

